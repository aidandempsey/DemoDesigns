





Complete the following VHDL model, and output in a single formatted code box.


Do not remove any comments beginning with '-- ', i.e, only two dashes

For each line between -- Title section start and -- Title section end, improve the text formatting

For each line containing the prefix '---', generate VHDL code describing the logic, applying the following rules.
Remove the '--- '  prefix from the line.

For arithmetic operations, use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.

If a line includes a std_logic_vector signal as an array index, convert the signal to an integer index using "ieee.numeric_std" package to_integer(unsigned()).

Convert shift_left and shift_right function outputs to signal type std_logic_vector.
Only use ieee.numeric_std package shift_left or shift_right functions, and do not use sra, srl, sll, shift_right_arithmetic functions, introduced in IEEE VHDL-2008
If a line includes a >>> shift right arithmetic operation, use ieee.numeric_std package shift_right function, assuming signed data.

Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4, extending the hex value to the exact width of the target signal.
Make assignment and equality check bit widths compatible.

Leave all labels unchanged.

For each line containing '_c:' in the label, generate a concurrent VHDL statement, do not generate a process statement, do not remove the label, remove the '---', and remove '-- Default assignment'

Remove all assignments in if or case statements which duplicate the default assignment.
Include null in others case statement if a default assignment is included in a case statement

For all case statements, include "when others => null;" before every occurrence of an "end case" statement.

Within all VHDL processes, do not remove the line containing '-- Default assignment', and place it immediately before the VHDL statements generated for lines containing prefix '--- '.

In assignments which include signals with one bit extension, e.g, (0 & CSUpr) or  (1 & CSUpr), use single quotes around the single bit value 0 or 1 and do not use double quotes "".
For example, generate ('0' & CSUpr) from VHDL (0 & CSUpr)

Do not remove any library statements, do not add any new library 'use' statements, to avoid conflicts with the ieee.numeric_std package functions.

Ensure that to_integer operates on unsigned signals, using the format to_integer(unsigned(signal)), not omitting the last bracket
Ensure that to_integer operates on signed signals, using the format to_integer(signed(signal)), not omitting the last bracket
if a std_logic_vector signal is compared to a decimal constant, convert the signal to integer format in the VHDL compare statement

Only use VHDL which is supported by the IEEE VHDL-1987 standard.

In all VHDL processes, replace each conditional when else statement with a case statement or an if statement, without removing any signal state check, and not including any assignments which duplicate the assignment labelled '-- Default assignment'

For signal which have a digit boundary width, use hexadecimal format in constant assignments, with 'x' prefix before double quotation marks.

-- Title Section Start
-- Generated by HDLGen, Github https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT, on 28-March-2024 at 10:35

-- Component Name : CB4CLED
-- Title          : 4-bit cascadable, loadable, up/down counter, with asynchronpous rst

-- Author(s)      : Fearghal Morgan
-- Organisation   : University of Galway
-- Email          : fearghal.morgan@university.ie
-- Date           : 28/03/2024

-- Description
-- If load = 1, synchronously loads count = loadDat
-- else if ce  = 1, synchronously
--   if up = 1, counts up
--   else counts down
-- 
-- TC terminal count combinationally asserted when 
--  up = 1 and count = 0xf (0d15)   or
--  up = 0 and count = 0 
-- 
-- ceo count enable output combinationally asserted when 
--  ce = 1 and TC = 1

-- entity signal dictionary
-- clk	System clk strobe, rising edge active
-- rst	Asynchronous rst signal, asserted high
-- load	Assertion (h) synchronously loads loadDat(3:0) in count(3:0)
-- Signal load has priority over ce (chip enable)
-- loadDat	4-bit load data
-- ce	Assertion (h) enables synchronous counting (when load is 
-- deasserted)
-- up	Assert (h) for up counting mode. 

-- Deassert for down counting mode.
-- count	Counter 4-bit output
-- Value rolls over 0f to 0 in count up mode  
-- Value rolls over 0 to 0f in count down mode
-- TC	Terminal count, asserted when 
-- up = 1 and count = 0xf (0d15) or 
-- up = 0 and count = 0
-- ceo	Count enable output, asserted when ce = 1 and TC = 1

-- internal signal dictionary
-- intTC	internal terminal count signal, asserted when 
-- up = 1 and count = 0xf (0d15) or 
-- up = 0 and count = 0
-- CS	Current state signal
-- NS	Next state signal

-- Title Section End
-- library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.MainPackage.all;

-- entity declaration
entity CB4CLED is 
Port(
	clk : in std_logic;
	rst : in std_logic;
	load : in std_logic;
	loadDat : in std_logic_vector(3 downto 0);
	ce : in std_logic;
	up : in std_logic;
	count : out std_logic_vector(3 downto 0);
	TC : out std_logic;
	ceo : out std_logic
);
end entity CB4CLED;

architecture RTL of CB4CLED is
-- Internal signal declarations
signal intTC : std_logic;
signal CS : std_logic_vector(3 downto 0);
signal NS : std_logic_vector(3 downto 0);

begin

NSDecode_p: process(load,loadDat,ce,up,CS)
begin
	NS <= CS;-- Default assignment 
	
--- if load = '1' 
--- NS = loadDat 
---else if ce = '1' 
--- if up = '1' 
--- NS = CS + '1' 
--- else 
--- NS = CS - '1'
--- end if
---end if
end process;

intTC_p: process(up,CS)
begin
	intTC <= '0';-- Default assignment 
	
--- if up = '1'
--- if CS = 15 
--- intTC = '1' 
--- end if
---else 
--- if CS = '0' 
--- intTC = '1' 
--- end if
---end if
end process;

ceo_p: process(ce,intTC)
begin
	ceo <= '0';-- Default assignment 
	
--- if ce = '1' and intTC = '1'
--- ceo = '1'
---end if
end process;

count_c: count <= CS;

TC_c: TC <= intTC;

stateReg_p: process(clk,rst)
begin
	if rst = '1' then
		CS <= (others => '0');
	elsif rising_edge(clk) then
		CS <= NS;
	end if;
end process;

end RTL;