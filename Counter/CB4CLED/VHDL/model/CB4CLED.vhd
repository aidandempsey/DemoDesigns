-- Title Section Start
-- Generated by HDLGen, GitHub https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT, on 24-September-2024 at 13:08

-- Component Name : CB4CLED
-- Title          : 4-bit Cascadable, Loadable, Up/Down Counter with Asynchronous Reset

-- Author(s)      : Fearghal Morgan
-- Organisation   : University of Galway
-- Email          : fearghal.morgan@university.ie
-- Date           : 24/09/2024

-- Description
-- If load = '1', synchronously loads count = loadDat
-- else if ce = '1',
--   if up = '1', counts up
--   else counts down
-- 
-- TC terminal count combinationally asserted when 
--  up = '1' and count = x"F" (0d15) or
--  up = '0' and count = x"0" 
-- 
-- ceo count enable output combinationally asserted when 
--  ce = '1' and TC = '1'

-- entity signal dictionary
-- clk   System clock strobe, rising edge active
-- rst   Asynchronous reset signal, asserted high
-- load  Assertion ('h') synchronously loads loadDat(3:0) in count(3:0)
-- Signal load has priority over ce (chip enable)
-- loadDat  4-bit load data
-- ce    Assertion ('h') enables synchronous counting (when load is 
-- deasserted)
-- up    Assert ('h') for up counting mode. 

-- Deassert for down counting mode.
-- count  Counter 4-bit output
-- Value rolls over x"F" to x"0" in count up mode  
-- Value rolls over x"0" to x"F" in count down mode
-- TC    Terminal count, asserted when 
-- up = '1' and count = x"F" (0d15) or 
-- up = '0' and count = x"0"
-- ceo   Count enable output, asserted when ce = '1' and TC = '1'

-- internal signal dictionary
-- intTC   Internal terminal count signal, asserted when 
-- up = '1' and count = x"F" (0d15) or 
-- up = '0' and count = x"0"
-- CS      Current state signal
-- NS      Next state signal

-- Title Section End
-- library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.MainPackage.all;

-- entity declaration
entity CB4CLED is 
Port(
	clk : in std_logic;
	rst : in std_logic;
	load : in std_logic;
	loadDat : in std_logic_vector(3 downto 0);
	ce : in std_logic;
	up : in std_logic;
	count : out std_logic_vector(3 downto 0);
	TC : out std_logic;
	ceo : out std_logic
);
end entity CB4CLED;

architecture RTL of CB4CLED is
-- Internal signal declarations
signal intTC : std_logic;
signal CS : std_logic_vector(3 downto 0);
signal NS : std_logic_vector(3 downto 0);

begin

NSDecode_p: process(load, loadDat, ce, up, CS)
begin
	NS <= CS; -- Default assignment 
	
	if load = '1' then 
		NS <= loadDat; 
	elsif ce = '1' then 
		if up = '1' then 
			NS <= std_logic_vector(unsigned(CS) + 1); 
		else 
			NS <= std_logic_vector(unsigned(CS) - 1); 
		end if; 
	end if;
end process;

intTC_p: process(up, CS)
begin
	intTC <= '0'; -- Default assignment 
	
	if up = '1' then
		if unsigned(CS) = 15 then 
			intTC <= '1'; 
		end if; 
	else 
		if unsigned(CS) = 0 then 
			intTC <= '1'; 
		end if; 
	end if;
end process;

ceo_p: process(ce, intTC)
begin
	ceo <= '0'; -- Default assignment 
	
	if ce = '1' and intTC = '1' then
		ceo <= '1'; 
	end if;
end process;

count_c: count <= CS;

TC_c: TC <= intTC;

stateReg_p: process(clk, rst)
begin
	if rst = '1' then
		CS <= (others => '0');
	elsif rising_edge(clk) then
		CS <= NS;
	end if;
end process;

end RTL;
