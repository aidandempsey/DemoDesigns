// Title Section Start
// Verilog testbench CB4CLED_TB
// Generated by HDLGen, Github https://github.com/fearghal1/HDLGen-ChatGPT, on 11-September-2023 at 19:51

// Component Name : CB4CLED
// Title          : 4-bit cascadable, loadable, up/down counter, with asynchronpous rst

// Author(s)      : Fearghal Morgan
// Organisation   : University of Galway
// Email          : fearghal.morgan@university.ie
// Date           : 11/09/2023

// Description    : refer to component hdl model for function description and signal dictionary
// Title Section End
module CB4CLED_TB();

// testbench signal declarations
integer testNo; // aids locating test in simulation waveform
reg endOfSim; // assert at end of simulation to highlight simuation done. Stops clk signal generation.

// Typically use the same signal names as in the Verilog module
reg clk;
reg rst;

reg  load;
reg [3:0] loadDat;
reg  ce;
reg  up;
wire [3:0] count;
wire  TC;
wire  ceo;

parameter  period = 20; // 20 ns
initial clk = 1'b1;
initial endOfSim = 1'b0;
 
// Generate clk signal, if sequential component, and endOfSim is 0.
always # (period/2.0) if (~endOfSim) clk = ~ clk;

CB4CLED UUT
	(
	.clk (clk), 
	.rst (rst), 
	.load (load), 
	.loadDat (loadDat), 
	.ce (ce), 
	.up (up), 
	.count (count), 
	.TC (TC), 
	.ceo (ceo)
	);

initial
begin
$timeformat(-9, 2, " ns", 20);
$display("Simulation start :: time is %0t",$time);
	// Apply default INPUT signal values. Do not assign output signals (generated by the UUT) here
	// Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	testNo = 0;
	load = 1'b0;
	loadDat = 4'b0;
	ce = 1'b0;
	up = 1'b0;
	rst    = 1'b1;
	# (1.2 * period);
	rst   = 1'b0;
	# (1 * period);

	// Add testbench stimulus here START

	// === If copying stim_p testbench code, generated by ChatGPT, 
	// === delete the following lines from the beginning of the pasted code (if they exist)
	// === integer testNo;
	// === parameter period = 20; // 20 ns
	// === reg, wire, declarations  ....
	// === initial begin
	// === Delete the -- === notes

	// === If copying a stim_p process generated by ChatGPT, 
	// === delete the following lines from the end of the pasted code 
	// === begin end
	// === Delete the -- === notes

	// Add testbench stimulus here END

	// Print nanosecond (ns) time to simulation transcript
	// Use to find time when simulation ends (endOfSim is TRUE)
	// Re-run the simulation for this time
	// Select timing diagram and use View>Zoom Fit
	$display("Simulation end :: time is %0t",$time);
	endOfSim = 1'b1; // assert to stop clk signal generation

end
endmodule