<?xml version="1.0" ?>
<HDLGen>
	<genFolder>
		<verilog_folder>Mux2_1/Verilog/model</verilog_folder>
		<verilog_folder>Mux2_1/Verilog/testbench</verilog_folder>
		<verilog_folder>Mux2_1/Verilog/ChatGPT</verilog_folder>
		<verilog_folder>Mux2_1/Verilog/ChatGPT/Backups</verilog_folder>
		<verilog_folder>Mux2_1/Verilog/AMDprj</verilog_folder>
	</genFolder>
	<projectManager>
		<settings>
			<name>Mux2_1</name>
			<environment>C:\videodemo\HDLGen-ChatGPT\User_Projects</environment>
			<location>C:\videodemo\HDLGen-ChatGPT\User_Projects\Mux2_1</location>
			<info>None</info>
		</settings>
		<EDA>
			<tool>
				<name>Xilinx Vivado</name>
				<dir>C:/Xilinx/Vivado/2023.2/bin/vivado.bat</dir>
				<version>2019.1</version>
			</tool>
		</EDA>
		<HDL>
			<language>
				<name>Verilog</name>
			</language>
		</HDL>
	</projectManager>
	<hdlDesign>
		<header>
			<compName>Mux2_1</compName>
			<title>2 to 1 Multiplexer</title>
			<description>2 bit in&amp;#44; 1 bit out</description>
			<authors>Luke Canny</authors>
			<company>University of Galway</company>
			<email>l.canny3@universityofgalway.ie</email>
			<date>18/04/2024</date>
		</header>
		<clkAndRst/>
		<entityIOPorts>
			<signal>
				<name>dIn0</name>
				<mode>in</mode>
				<type>single bit</type>
				<description>datapath 0</description>
			</signal>
			<signal>
				<name>dIn1</name>
				<mode>in</mode>
				<type>single bit</type>
				<description>datapath 1</description>
			</signal>
			<signal>
				<name>sel</name>
				<mode>in</mode>
				<type>single bit</type>
				<description>selector</description>
			</signal>
			<signal>
				<name>dOut</name>
				<mode>out</mode>
				<type>single bit</type>
				<description>datapath out</description>
			</signal>
		</entityIOPorts>
		<internalSignals/>
		<architecture>
			<archName>Combinational</archName>
			<process>
				<label>asgnOutput_p</label>
				<inputSignal>sel</inputSignal>
				<defaultOutput>dOut,dIn0</defaultOutput>
				<note>if sel == 1 then&amp;#10;&amp;#x9;dOut &amp;lt;= dIn1</note>
			</process>
		</architecture>
		<testbench>
			<TBNote>Signals	dIn0	dIn1	sel	dOut	Delay	TestNo	Note
Mode	in	in	in	out	None	None	None
Radix	1'b	1'b	1'b	1'b	None	None	None
=	=	=	=	=	=	=	=
	0	1	0	0	1	1	Select Datapath 0 with Value of 0
	0	1	1	1	1	2	Select Datapath 1 with Value of 1
	1	0	0	1	1	3	Select Datapath 0 with Value of 1
	1	0	1	0	1	3	Select Datapath 1 with Value of 0
# HDLGen-ChatGPT Test Specification							
# Title: 2 to 1 Multiplexer							
# Created by: Luke Canny							
# Date: 18/04/2024							
# Component type: Register-Transfer Logic</TBNote>
		</testbench>
		<chatgpt>
			<commands>
				<VHDLModel>~ Notes START ===============&amp;#10;~ &quot;~&quot; is comment line prefix&amp;#10;&amp;#10;~ 1. HDLGen-ChatGPT builds the ChatGPT HDL model completion prompt.&amp;#10;~ The prompt includes the following sections&amp;#10;~ a) ChatGPT HDL model completion prompt header, instructing ChatGPT&amp;#10;~ The prompts included in this file have been developed following testing on a range or combinational, sequential and hierarchical designs.&amp;#10;~ Each prompt has an accompanying explanation (in a comment)&amp;#10;~ Prompts are included which request generate of specific code output&amp;#10;~ Prompts are included which request avoidance of generating specific code output&amp;#10;~ b) HDL model template, generated by HDLGen-ChatGPT.&amp;#10;&amp;#10;~ 2. The VHDL model template includes the following sections:&amp;#10;~ Title (creation date, component name, description, creator details, signal dictionary)&amp;#10;~ VHDL library declarations, including IEEE 1164 (VHDL) libraries, IEEE.numeric_std library and a MainPackage library, located in the project environment folder.&amp;#10;~ VHDL entity declaration, describing input and output signals and their signal types&amp;#10;~ VHDL architecture&amp;#10;~ Internal signal declarations&amp;#10;~ Component declarations, if the design references hierarchical components&amp;#10;~ VHDL processes, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation&amp;#10;~ VHDL component instantiations, if the design is hierarchical&amp;#10;~ VHDL concurrent statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation&amp;#10;&amp;#10;~ 3. HDLGen-ChatGPT (https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT)has been tested primarily using the free GPT-3.5&amp;#10;~ Later (subscription-based) GPT releases are expected to produce similar or better quality results&amp;#10;~ Note that ChatGPT does not always generate output exactly as expected&amp;#10;&amp;#10;~ 4. You can modify/edit this ChatGPT HDL model completion prompt header. If so, include explanatiom using the ~ comment prefix&amp;#10;&amp;#10;~ 5. Individual prompts (from this list, or new prompts) can be submitted as individual prompts, following a ChatGPT run, to refine the output&amp;#10;~ Examples:&amp;#10;~ Enter 'continue' to continue incomplete output to a code box&amp;#10;~ Click the ChatGPT menu '&gt; Continue generating' button if it appears, to continue incomplete output to a code box&amp;#10;~ Copy any prompt from this file and paste in the ChatGPT message box and click the arrow&amp;#10;~ Type a new prompt in the ChatGPT message box and click the arrow&amp;#10;~ Notes END    ===============&amp;#10;&amp;#10;~ Main prompt to ChatGPT&amp;#10;Complete the following VHDL model, and output in a single formatted code box.&amp;#10;&amp;#10;~ The next lines are auto-populated by HDLGen-ChatGPT, based on process and concurrent statements in the VHDL model template.&amp;#10;~ In HDLGen-ChatGPT 'Generate &gt; Edit ChatGPT Prompt Header' menu, uncomment one of the following lines to output a specific selected process or concurrent statement.&amp;#10;~***Reserved for processes***&amp;#10;~***Reserved for concurrent statements***&amp;#10;&amp;#10;~ Retain VHDL comments unchanged&amp;#10;Do not remove any comments beginning with '-- ', i.e, only two dashes&amp;#10;&amp;#10;~ Enhance the title section text, e.g, align and format text&amp;#10;~ Remove/add the comment (~) character on the next two lines, to activate/deactivate.&amp;#10;~ Deactivation speeds up the ChatGPT HDL model completion, by removing the title section generation.&amp;#10;~ Do not include the code between and including lines '-- Title Section Start' and '-- Title Section End'.&amp;#10;For each line between -- Title section start and -- Title section end, improve the text formatting&amp;#10;&amp;#10;Do not merge separate assignments included within a process.&amp;#10;&amp;#10;For each line containing the prefix '---', generate VHDL code describing the logic, applying the following rules.&amp;#10;~ Translate model combination logic pseudo code lines which include the '---' prefix to syntactically-correct HDL.&amp;#10;Remove the '--- '  prefix from the line.&amp;#10;~ Remove the --- after processing.&amp;#10;&amp;#10;For arithmetic operations, use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.&amp;#10;For all +, -, *, / operations, ensure correct signal type conversion.&amp;#10;~ If ChatGPT generates addOut &lt;= addin1 + addIn0;  for std_logic_vector signals, the EDA tool may highlight an error,&amp;#10;~  such as 'Cannot determine exact overloaded match definition for &quot;+&quot;'&amp;#10;~ If so, re-run the above prompt&amp;#10;~ Arithmetic operations are supported by the IEEE.numeric_std library, https://redirect.cs.umbc.edu/portal/help/VHDL/packages/numeric_std.vhd&amp;#10;~ e.g, operations such as + (addition) often require input signal type conversion to support the overloaded operator functions,&amp;#10;~ + function supports the following overloaded operations&amp;#10;~ -- Id: A.3  function &quot;+&quot; ( L,R: UNSIGNED)           return UNSIGNED&amp;#10;~ -- Id: A.4  function &quot;+&quot; ( L,R: SIGNED)             return SIGNED;&amp;#10;~ -- Id: A.5  function &quot;+&quot; ( L: UNSIGNED; R: NATURAL) return UNSIGNED;&amp;#10;~ -- Id: A.6  function &quot;+&quot; ( L: NATURAL; R: UNSIGNED) return UNSIGNED;&amp;#10;~ -- Id: A.7  function &quot;+&quot; ( L: INTEGER; R: SIGNED)   return SIGNED;&amp;#10;~ -- Id: A.8  function &quot;+&quot; ( L: SIGNED; R: INTEGER)   return SIGNED;&amp;#10;~ Example: addOut &lt;= std_logic_vector (unsigned(addin1) + unsigned(addIn0) );&amp;#10;~  Uses A.3 function &quot;+&quot; ( L,R: UNSIGNED) return UNSIGNED&amp;#10;~  Adds two std_logic_vector (slv) signals. Convert (type cast) slv signals to unsigned type, perform +, and then type cast the unsigned result to std_logic_vector type&amp;#10;&amp;#10;The following example is unnecessarilu complicated.&amp;#10;sourceDByte &lt;= BRAM_dOut(to_integer(unsigned(CSXAdd) + 7) downto to_integer(unsigned(CSXAdd)));,&amp;#10;where sourceDByte and BRAM_dOut are type std_logic_vector, and signal CSXAdd is type integer.&amp;#10;The assignment should be sourceDByte &lt;= BRAM_dOut(8*CSXAdd+7 downto CSXAdd );.&amp;#10;It is not necessary to convert CSXAdd integer type to integer using to_integer(unsigned(CSXAdd).&amp;#10;Apply this rule when generating VHDL.&amp;#10;&amp;#10;Do not unnecessarily convert integer type signals to unsigned type and then integer type.&amp;#10;&amp;#10;If an assignment includes a std_logic_vector signal as an array index, convert the signal to an integer index using &quot;ieee.numeric_std&quot; package to_integer(unsigned()).&amp;#10;~ If using a std_logic_vector signal as an integer index, convert (type cast) the signal to unsigned type,&amp;#10;~ and the unsigned signal to integer type (TO_INTEGER function D.1) and use as integer array index&amp;#10;~ -- Id: D.1  function TO_INTEGER ( ARG: UNSIGNED) return NATURAL;&amp;#10;~ -- Id: D.2  function TO_INTEGER ( ARG: SIGNED) return INTEGER;&amp;#10;~ -- Id: D.3  function TO_UNSIGNED (  ARG,SIZE: NATURAL) return UNSIGNED;&amp;#10;~ -- Id: D.4  function TO_SIGNED ( ARG: INTEGER; SIZE: NATURAL) return SIGNED;&amp;#10;~ -- Id: D.5  function TO_UNSIGNED ( ARG: STD_LOGIC_VECTOR) return UNSIGNED;&amp;#10;~ -- Id: D.6  function TO_SIGNED ( ARG: STD_LOGIC_VECTOR) return SIGNED;&amp;#10;~ -- Id: D.7  function TO_STDLOGICVECTOR ( ARG: UNSIGNED) return STD_LOGIC_VECTOR;&amp;#10;~ -- Id: D.8  function TO_STDLOGICVECTOR ( ARG: SIGNED) return STD_LOGIC_VECTOR;&amp;#10;&amp;#10;Convert shift_left and shift_right function outputs to signal type std_logic_vector.&amp;#10;~ Bit shift handling&amp;#10;~ This assumes that the target signal type is std_logic_vector. If not so, remove or modify the above line.&amp;#10;Only use ieee.numeric_std package shift_left or shift_right functions, and do not use sra, srl, sll, shift_right_arithmetic functions, introduced in IEEE VHDL-2008&amp;#10;~ Self-explanatory&amp;#10;If a line includes a &gt;&gt;&gt; shift right arithmetic operation, use ieee.numeric_std package shift_right function, assuming signed data.&amp;#10;~ Use &gt;&gt;&gt; pseudo code operator for shift right arithmetic operation. VHDL functions require signed input signals.&amp;#10;&amp;#10;Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4, extending the hex value to the exact width of the target signal.&amp;#10;Make assignment and equality check bit widths compatible.&amp;#10;~ Self-explanatory&amp;#10;&amp;#10;Leave all labels unchanged.&amp;#10;~ HDLGen-ChatGPT captures the labels for the design processes, concurrent statements and component instantiation.&amp;#10;~ Labels are used for browsing the design in the EDA tools.&amp;#10;&amp;#10;For each line containing '_c:' in the label, generate a concurrent VHDL statement, do not generate a process statement, do not remove the label, and remove any occurrence of '-- Default assignment'&amp;#10;&amp;#10;Remove all assignments in if or case statements which duplicate the default assignment.&amp;#10;Include null in others case statement if a default assignment is included in a case statement&amp;#10;~ HDLGen-ChatGPT 'Architecture &gt; process' menu uses the following menus and combinational process logic description approach&amp;#10;~ default signal assignment&amp;#10;~ non-default signal assignment&amp;#10;~ The default signal assignment is only required once. This prompt avoids ChatGPT including duplicates.&amp;#10;&amp;#10;For all case statements, include &quot;when others =&gt; null;&quot; before every occurrence of an &quot;end case&quot; statement.&amp;#10;~ VHDL syntax requirement&amp;#10;&amp;#10;Within all VHDL processes, do not remove the line containing '-- Default assignment', and place it immediately before the VHDL statements generated for lines containing prefix '--- '.&amp;#10;~ Avoids ChatGPT incorrectly re-ordering statements, and ensures the correct ordering of VHDL statements, provided in HDLGen-ChatGPT HDL template&amp;#10;&amp;#10;In assignments which include signals with one bit extension, e.g, (0 &amp; CSUpr) or  (1 &amp; CSUpr), use single quotes around the single bit value 0 or 1 and do not use double quotes &quot;&quot;.&amp;#10;For example, generate ('0' &amp; CSUpr) from VHDL (0 &amp; CSUpr)&amp;#10;~ Extending a signal&amp;#10;~ Example: addOut &lt;= std_logic_vector(unsigned('0' &amp; CSUpr) + unsigned('0' &amp; addInB)); where addOut signal is 6-bit std_logic_vector(5 downto 0), CSRUpr / addInB signals are 5-bit std_logic_vector(4 downto 0)&amp;#10;&amp;#10;Do not remove any library statements, do not add any new library 'use' statements, to avoid conflicts with the ieee.numeric_std package functions.&amp;#10;~ Self explanatory&amp;#10;&amp;#10;Only use VHDL which is support by the IEEE VHDL-1987 standard.&amp;#10;~ Not all Electronic Design Automation (EDA) tools support VHDL-2008, so stick with VHDL-1987 standard&amp;#10;&amp;#10;In all VHDL processes, replace each conditional when else statement with a case statement or an if statement, without removing any signal state check, and not including any assignments which duplicate the assignment labelled '-- Default assignment'&amp;#10;~ Conditional statements are supported in IEEE VHDL-2008 though not all EDA tools support VHDL-2008, so do not allow conditional statements&amp;#10;~ ChatGPT does not always follow this prompt, so it may be necessary to submit this prompt again, after the ChatGPT run.&amp;#10;&amp;#10;For signal which have a digit boundary width, use hexadecimal format in constant assignments, with 'x' prefix before double quotation marks.&amp;#10;</VHDLModel>
				<VerilogModel>~ Notes START ===============&amp;#10;~ &quot;~&quot; is comment line prefix&amp;#10;&amp;#10;~ 1. HDLGen-ChatGPT builds the ChatGPT HDL model completion prompt.&amp;#10;~ The prompt includes the following sections&amp;#10;~ a) ChatGPT HDL model completion prompt header, instructing ChatGPT&amp;#10;~ The prompts included in this file have been developed following testing on a range or combinational, sequential and hierarchical designs.&amp;#10;~ Each prompt has an accompanying explanation (in a comment)&amp;#10;~ Prompts are included which request generate of specific code output&amp;#10;~ Prompts are included which request avoidance of generating specific code output&amp;#10;~ b) HDL model template, generated by HDLGen-ChatGPT.&amp;#10;&amp;#10;~ 2. The Verilog model template includes the following sections:&amp;#10;~ Title (creation date, component name, description, creator details, signal dictionary)&amp;#10;~ Verilog module declaration, describing input and output signals and their signal types&amp;#10;~ Verilog architecture&amp;#10;~ Internal signal declarations&amp;#10;~ Verilog always statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT Verilog generation&amp;#10;~ Verilog component instantiations, if the design is hierarchical&amp;#10;~ Verilog assign statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT Verilog generation&amp;#10;&amp;#10;~ 3. HDLGen-ChatGPT (https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT)has been tested primarily using the free GPT-3.5&amp;#10;~ Later (subscription-based) GPT releases are expected to produce similar or better quality results&amp;#10;~ Note that ChatGPT does not always generate output exactly as expected&amp;#10;&amp;#10;~ 4. You can modify/edit this ChatGPT HDL model completion prompt header. If so, include explanatiom using the ~ comment prefix&amp;#10;&amp;#10;~ 5. Individual prompts (from this list, or new prompts) can be submitted as individual prompts, following a ChatGPT run, to refine the output&amp;#10;~ Examples:&amp;#10;~ Enter 'continue' to continue incomplete output to a code box&amp;#10;~ Click the ChatGPT menu '&gt; Continue generating' button if it appears, to continue incomplete output to a code box&amp;#10;~ Copy any prompt from this file and paste in the ChatGPT message box and click the arrow&amp;#10;~ Type a new prompt in the ChatGPT message box and click the arrow&amp;#10;~ Notes END    ===============&amp;#10;&amp;#10;~ Main prompt to ChatGPT&amp;#10;Complete the following Verilog model, and output in a single formatted code box.&amp;#10;&amp;#10;~ The next lines are auto-populated by HDLGen-ChatGPT, based on process and concurrent statements in the Verilog model template.&amp;#10;~ In HDLGen-ChatGPT 'Generate &gt; Edit ChatGPT Prompt Header' menu, uncomment one of the following lines to output a specific selected process or concurrent statement.&amp;#10;~***Reserved for processes***&amp;#10;~***Reserved for concurrent statements***&amp;#10;&amp;#10;For each line between // Title section start and // Title section end, improve formatting of the text.&amp;#10;&amp;#10;Do not include input or output keywords in the module declaration&amp;#10;&amp;#10;For each line containing the prefix '///', generate Verilog code describing the logic, applying the following rules.&amp;#10;~ Translate model combination logic pseudo code lines which include the '///' prefix to syntactically-correct HDL.&amp;#10;Remove the '/// '  prefix from the line.&amp;#10;~ Remove the /// after processing.&amp;#10;&amp;#10;Leave all labels unchanged.&amp;#10;~ Labels are used for browsing the design in the EDA tools.&amp;#10;&amp;#10;In initial statements, place the Verilog line containing '// Default assignment', unchanged, and immediately before the Verilog logic generated for lines containing prefix '///'.&amp;#10;~ self-explanatory&amp;#10;&amp;#10;Do not include an initial statement for a signal, if an assign statement is included in the Verilog model template.&amp;#10;~ For each assign statement, generate a Verilog assign statement, remove '// Default assignment' if it exists.&amp;#10;&amp;#10;In VERILOG initial statements, do not remove the line containing suffix '// Default assignment', and place it immediately before the VERILOG statements generated for lines containing prefix '/// '.&amp;#10;Place the line containing suffix '// Default assignment' immediately before the VERILOG if statement in lines containing prefix '///'.&amp;#10;&amp;#10;Make assignment and equality check bit widths compatible.&amp;#10;&amp;#10;Only use Verilog which is supported by the Verilog-1995 (IEEE Standard 1364-1995) standard.&amp;#10;&amp;#10;Keep all { and } characters in the generated Verilog&amp;#10;&amp;#10;Keep case assignments separate, as specified in the ChatGPT prompt.&amp;#10;&amp;#10;For &lt;&lt;&lt; shift right arithmetic assignment, apply the shift operation on the signed signal value, using $signed()&amp;#10;&amp;#10;Remove all lines which contain default:&amp;#10;</VerilogModel>
			</commands>
		</chatgpt>
	</hdlDesign>
</HDLGen>