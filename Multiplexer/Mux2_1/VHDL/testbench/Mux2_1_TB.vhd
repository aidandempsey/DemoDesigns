-- Title Section Start
-- VHDL Testbench - Mux2_1_TB
-- Generated by HDLGen-ChatGPT on 24-September-2024 at 12:42
-- Github: https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT

-- Component Name:	Mux2_1
-- Title:	Mux2_1

-- Author(s):	Luke Canny
-- Organisation:	University of Galway
-- Email:	l.canny3@universityofgalway.ie
-- Date:	24/09/2024

-- Description:	 Refer to component's HDL Model for description and signal dictionary
-- Title Section End

-- Library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Testbench entity declaration
entity Mux2_1_TB is end entity Mux2_1_TB;

architecture behave of Mux2_1_TB is

-- unit under test (UUT) component declaration. Identical to component entity, with 'entity' replaced with 'component'
component Mux2_1 is 
Port(
	dIn0 : in std_logic;
	dIn1 : in std_logic;
	sel : in std_logic;
	dOut : out std_logic 
	);
end component;

-- testbench signal declarations
signal testNo: integer; -- aids locating test in simulation waveform
signal endOfSim : boolean := false; -- assert at end of simulation to highlight simuation done. Stops clk signal generation.

-- Typically use the same signal names as in the VHDL entity, with keyword signal added, and without in/out mode keyword

signal dIn0 : std_logic;
signal dIn1 : std_logic;
signal sel : std_logic;
signal dOut : std_logic;

constant period: time := 20 ns; -- Default simulation time. Use as simulation delay constant, or clk period if sequential model ((50MHz clk here)
 
begin

-- Instantiate the Unit Under Test (UUT)
-- Map the component's internal signals to testbench signals
UUT: Mux2_1
port map
	(
	dIn0 => dIn0, 
	dIn1 => dIn1, 
	sel => sel, 
	dOut => dOut
	);

-- Signal stimulus process
-- Process automatically executes at start of simulation due to empty sensitivity list.
-- Process halts at the 'wait;' statement
stim_p: process
begin
	report "%N Simulation start, time = "& time'image(now);

	-- Apply default INPUT signal values.
	-- Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	-- if signal type is 'std_logic', use '0'
	-- if signal type is 'std_logic_vector' use (others => '0')
	-- if signal type is 'integer' use 0
	dIn0 <= '0';
	dIn1 <= '0';
	sel <= '0';

	-- START Testbench stimulus

	-- BEGIN Test Number 1
	testNo <= 1; -- Select Datapath 0 with Value of 0
	dIn0 <= '0';
	dIn1 <= '1';
	sel <= '0';
	wait for (1 * period);
	assert dOut = '0' report "TestNo 1 dOut mismatch" severity warning;
	-- END Test Number 1

	-- BEGIN Test Number 2
	testNo <= 2; -- Select Datapath 1 with Value of 1
	dIn0 <= '0';
	dIn1 <= '1';
	sel <= '1';
	wait for (1 * period);
	assert dOut = '1' report "TestNo 2 dOut mismatch" severity warning;
	-- END Test Number 2

	-- BEGIN Test Number 3
	testNo <= 3; -- Select Datapath 0 with Value of 1
	dIn0 <= '1';
	dIn1 <= '0';
	sel <= '0';
	wait for (1 * period);
	assert dOut = '1' report "TestNo 3 dOut mismatch" severity warning;
	-- END Test Number 3

	-- BEGIN Test Number 3
	testNo <= 3; -- Select Datapath 1 with Value of 0
	dIn0 <= '1';
	dIn1 <= '0';
	sel <= '1';
	wait for (1 * period);
	assert dOut = '0' report "TestNo 3 dOut mismatch" severity warning;
	-- END Test Number 3


	-- END Testbench stimulus

	report "%N Simulation end, time = "& time'image(now);
	-- Assert 'endOfSim' flag to stop the clock signal
	endOfSim <= TRUE;
	wait; -- Wait forever
end process; 
end behave;