// Title Section Start
// Generated by HDLGen, Github https://github.com/fearghal1/HDLGen-ChatGPT, on 10-October-2023 at 09:00

// Component Name : RISCV_ALU
// Title          : RV32I RISC-V Arithmetic Logic Unit (ALU)

// Author(s)      : Fearghal Morgan
// Organisation   : University of Galway
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 10/10/2023

// Description
// RISC-V Arithmetic Logic Unit (RISCV_ALU)
// Combinational logic component
// Input signal selALUOp(3:0) selects ALU function.
// 32-bit data inputs A, B
// 32-bit data output ALUOut
// Output signal branch, asserted when branch condition is true

// entity signal dictionary
// selALUOp	ALU control signal
// A	ALU data input A
// B	ALU data input B
// ALUOut	ALU data output
// branch	Asserted (h) for branch operation (selALOp(3:0) = 10-15 if 
// branch condition check is true

// internal signal dictionary
// None

// Title Section End
// module declaration
module RISCV_ALU(
    selALUOp,
    A,
    B,
    ALUOut,
    branch
);

// Port definitions
input [3:0] selALUOp;
input [31:0] A;
input [31:0] B;
output [31:0] ALUOut;
output branch;

reg [31:0] ALUOut;
reg branch;

// Internal signal declarations
// None

always @(selALUOp or A or B)
begin : ALUOut_p
    ALUOut = 32'b0; // Default assignment
    case (selALUOp)
        4'b0000: ALUOut = $signed(A) + $signed(B);
        4'b0001: ALUOut = $signed(A) - $signed(B);
        4'b0010: ALUOut = A & B;
        4'b0011: ALUOut = A | B;
        4'b0100: ALUOut = A ^ B;
        4'b0101: ALUOut = A << B[4:0];
        4'b0110: ALUOut = A >> B[4:0];
        4'b0111: ALUOut = $signed(A) >>> B[4:0];
        4'b1000: if ($signed(A) < $signed(B)) ALUOut = 32'b0x00000001;
        4'b1001: if (A < B) ALUOut = 32'b0x00000001;
    endcase
end

always @(selALUOp or A or B)
begin : branch_p
    branch = 1'b0; // Default assignment
    case (selALUOp)
        4'b1010: if (A == B) branch = 1'b1;
        4'b1011: if (A != B) branch = 1'b1;
        4'b1100: if ($signed(A) < $signed(B)) branch = 1'b1;
        4'b1101: if ($signed(A) >= $signed(B)) branch = 1'b1;
        4'b1110: if (A < B) branch = 1'b1;
        4'b1111: if (A >= B) branch = 1'b1;
    endcase
end

endmodule
