// Title Section Start
// Verilog testbench RISCV_ALU_TB
// Generated by HDLGen, Github https://github.com/fearghal1/HDLGen-ChatGPT, on 10-October-2023 at 09:00

// Component Name : RISCV_ALU
// Title          : RV32I RISC-V Arithmetic Logic Unit (ALU)

// Author(s)      : Fearghal Morgan
// Organisation   : University of Galway
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 10/10/2023

// Description    : refer to component hdl model for function description and signal dictionary
// Title Section End
module RISCV_ALU_TB();

// testbench signal declarations
integer testNo; // aids locating test in simulation waveform
reg endOfSim; // assert at end of simulation to highlight simuation done. Stops clk signal generation.

// Typically use the same signal names as in the Verilog module

reg [3:0] selALUOp;
reg [31:0] A;
reg [31:0] B;
wire [31:0] ALUOut;
wire  branch;

parameter  period = 20; // 20 ns
initial endOfSim = 1'b0;
 
RISCV_ALU UUT
	(
	.selALUOp (selALUOp), 
	.A (A), 
	.B (B), 
	.ALUOut (ALUOut), 
	.branch (branch)
	);

initial
begin
$timeformat(-9, 2, " ns", 20);
$display("Simulation start :: time is %0t",$time);
	// Apply default INPUT signal values. Do not assign output signals (generated by the UUT) here
	// Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	testNo = 0;
	selALUOp = 4'b0;
	A = 32'b0;
	B = 32'b0;

	// Add testbench stimulus here START

// Input signals: selALUOp, A, B
// Output signals: ALUOut, branch

    // Test 1
    testNo = 1;
    // Note: sgnA + sgnB
    selALUOp = 4'b0000;
    A = 32'h00005a5a;
    B = 32'h0015a5a6;
    # (1 * period);
    if (ALUOut !== 32'h70000000) $display("Test %d failed for ALUOut. Expected: 32'h70000000, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 2
    testNo = 2;
    // Note: sgnA + sgnB
    selALUOp = 4'b0000;
    A = 32'h0015a5a6;
    B = 32'h00005a5a;
    # (1 * period);
    if (ALUOut !== 32'h70000000) $display("Test %d failed for ALUOut. Expected: 32'h70000000, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 3
    testNo = 3;
    // Note: (No specific condition mentioned)
    selALUOp = 4'b0000;
    A = 32'hffffffff;
    B = 32'h40000000;
    # (1 * period);
    if (ALUOut !== 32'h3fffffff) $display("Test %d failed for ALUOut. Expected: 32'h3fffffff, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 4
    testNo = 4;
    // Note: sgnA - sgnB
    selALUOp = 4'b0001;
    A = 32'hffffffff;
    B = 32'hfffffffe;
    # (1 * period);
    if (ALUOut !== 32'h00000001) $display("Test %d failed for ALUOut. Expected: 32'h00000001, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 5
    testNo = 5;
    // Note: A and B
    selALUOp = 4'b0010;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'h10428094) $display("Test %d failed for ALUOut. Expected: 32'h10428094, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 6
    testNo = 6;
    // Note: A or B
    selALUOp = 4'b0011;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'hffffafb6) $display("Test %d failed for ALUOut. Expected: 32'hffffafb6, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 7
    testNo = 7;
    // Note: A xor B
    selALUOp = 4'b0100;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'hefbd2f22) $display("Test %d failed for ALUOut. Expected: 32'hefbd2f22, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 8
    testNo = 8;
    // Note: A << B(4:0) (shift left logical)
    selALUOp = 4'b0101;
    A = 32'hf0c3a596;
    B = 32'h00000008;
    # (1 * period);
    if (ALUOut !== 32'hc3a59600) $display("Test %d failed for ALUOut. Expected: 32'hc3a59600, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 9
    testNo = 9;
    // Note: A >> B(4:0) (shift right logical)
    selALUOp = 4'b0110;
    A = 32'hf0c3a596;
    B = 32'h00000008;
    # (1 * period);
    if (ALUOut !== 32'h00f0c3a5) $display("Test %d failed for ALUOut. Expected: 32'h00f0c3a5, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 10
    testNo = 10;
    // Note: A >>> B(4:0) (shift right arithmetic)
    selALUOp = 4'b0111;
    A = 32'hf0c3a596;
    B = 32'h00000008;
    # (1 * period);
    if (ALUOut !== 32'hfff0c3a5) $display("Test %d failed for ALUOut. Expected: 32'hfff0c3a5, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 11
    testNo = 11;
    // Note: 1 if sgn A < sgn B
    selALUOp = 4'b1000;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'h00000001) $display("Test %d failed for ALUOut. Expected: 32'h00000001, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 12
    testNo = 12;
    // Note: 1 if uns A < uns B
    selALUOp = 4'b1001;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 13
    testNo = 13;
    // Note: branch = 1 if A = B
    selALUOp = 4'b1010;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b1) $display("Test %d failed for branch. Expected: 1'b1, Actual: branch", testNo);

    // Test 14
    testNo = 14;
    // Note: branch = 1 if A = B
    selALUOp = 4'b1010;
    A = 32'hf0c3a596;
    B = 32'hf0c3a596;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b1) $display("Test %d failed for branch. Expected: 1'b1, Actual: branch", testNo);

    // Test 15
    testNo = 15;
    // Note: branch = 1 if A != B
    selALUOp = 4'b1011;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b1) $display("Test %d failed for branch. Expected: 1'b1, Actual: branch", testNo);

    // Test 16
    testNo = 16;
    // Note: branch = 1 if A != B
    selALUOp = 4'b1011;
    A = 32'hf0c3a596;
    B = 32'hf0c3a596;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 17
    testNo = 17;
    // Note: branch = 1 if sgn A < sgnB
    selALUOp = 4'b1100;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b1) $display("Test %d failed for branch. Expected: 1'b1, Actual: branch", testNo);

    // Test 18
    testNo = 18;
    // Note: branch = 1 if sgn A < sgnB
    selALUOp = 4'b1100;
    A = 32'hf0c3a596;
    B = 32'hf0c3a596;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 19
    testNo = 19;
    // Note: branch = 1 if sgn A >= sgnB
    selALUOp = 4'b1101;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 20
    testNo = 20;
    // Note: branch = 1 if sgn A >= sgnB
    selALUOp = 4'b1101;
    A = 32'hf0c3a596;
    B = 32'hf0c3a596;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b1) $display("Test %d failed for branch. Expected: 1'b1, Actual: branch", testNo);

    // Test 21
    testNo = 21;
    // Note: branch = 1 if uns A < uns B
    selALUOp = 4'b1110;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b1) $display("Test %d failed for branch. Expected: 1'b1, Actual: branch", testNo);

    // Test 22
    testNo = 22;
    // Note: branch = 1 if uns A < uns B
    selALUOp = 4'b1110;
    A = 32'hf0c3a593;
    B = 32'hf0c3a596;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b1) $display("Test %d failed for branch. Expected: 1'b1, Actual: branch", testNo);

    // Test 23
    testNo = 23;
    // Note: branch = 1 if uns A >= uns B
    selALUOp = 4'b1111;
    A = 32'hf0c3a596;
    B = 32'h1f7e8ab4;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b0) $display("Test %d failed for branch. Expected: 1'b0, Actual: branch", testNo);

    // Test 24
    testNo = 24;
    // Note: branch = 1 if uns A >= uns B
    selALUOp = 4'b1111;
    A = 32'hf0c3a596;
    B = 32'hf0c3a596;
    # (1 * period);
    if (ALUOut !== 32'h00000000) $display("Test %d failed for ALUOut. Expected: 32'h00000000, Actual: ALUOut", testNo);
    if (branch !== 1'b1) $display("Test %d failed for branch. Expected: 1'b1, Actual: branch", testNo);

    // Continue with the remaining test cases...

	// === If copying stim_p testbench code, generated by ChatGPT, 
	// === delete the following lines from the beginning of the pasted code (if they exist)
	// === integer testNo;
	// === parameter period = 20; // 20 ns
	// === reg, wire, declarations  ....
	// === initial begin
	// === Delete the -- === notes

	// === If copying a stim_p process generated by ChatGPT, 
	// === delete the following lines from the end of the pasted code 
	// === begin end
	// === Delete the -- === notes

	// Add testbench stimulus here END

	// Print nanosecond (ns) time to simulation transcript
	// Use to find time when simulation ends (endOfSim is TRUE)
	// Re-run the simulation for this time
	// Select timing diagram and use View>Zoom Fit
	$display("Simulation end :: time is %0t",$time);
	endOfSim = 1'b1; // assert to stop clk signal generation

end
endmodule