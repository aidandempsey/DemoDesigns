// Title Section Start
// Verilog testbench RISCV_ALU_TB
// Generated by HDLGen, Github https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT, on 24-September-2024 at 13:18

// Component Name : RISCV_ALU
// Title          : RV32I RISC-V Arithmetic Logic Unit (ALU)

// Author(s)      : Fearghal Morgan
// Organisation   : University of Galway
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 24/09/2024

// Description    : refer to component hdl model for function description and signal dictionary
// Title Section End
module RISCV_ALU_TB();

// testbench signal declarations
integer testNo; // aids locating test in simulation waveform
reg endOfSim; // assert at end of simulation to highlight simuation done. Stops clk signal generation.

// Typically use the same signal names as in the Verilog module

reg [3:0] selALUOp;
reg [31:0] A;
reg [31:0] B;
wire [31:0] ALUOut;
wire  branch;

parameter  period = 20; // 20 ns
initial endOfSim = 1'b0;
 
RISCV_ALU UUT
	(
	.selALUOp (selALUOp), 
	.A (A), 
	.B (B), 
	.ALUOut (ALUOut), 
	.branch (branch)
	);

initial
begin
$timeformat(-9, 2, " ns", 20);
$display("Simulation start :: time is %0t",$time);

// Default input signal values
testNo = 0;
selALUOp = 4'b0;
A = 32'b0;
B = 32'b0;

// START Testbench stimulus

// BEGIN Test Number 1
testNo = 1; // sgnA + sgnB
selALUOp = 4'b0000;
A = 32'h5a5a5a5a;
B = 32'h15a5a5a6;
#(1 * period);
if (ALUOut !== 32'h70000000)
	 $display("TestNo 1 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 1 branch mismatch");
// END Test Number 1

// BEGIN Test Number 2
testNo = 2; // sgnA + sgnB
selALUOp = 4'b0000;
A = 32'h15a5a5a6;
B = 32'h5a5a5a5a;
#(1 * period);
if (ALUOut !== 32'h70000000)
	 $display("TestNo 2 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 2 branch mismatch");
// END Test Number 2

// BEGIN Test Number 1
testNo = 1; // 3
selALUOp = 4'b0000;
A = 32'hffffffff;
B = 32'h40000000;
#(0 * period);
if (ALUOut !== 32'h3fffffff)
	 $display("TestNo 1 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 1 branch mismatch");
// END Test Number 1

// BEGIN Test Number 4
testNo = 4; // sgnA - sgnB
selALUOp = 4'b0001;
A = 32'hffffffff;
B = 32'hfffffffe;
#(1 * period);
if (ALUOut !== 32'h00000001)
	 $display("TestNo 4 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 4 branch mismatch");
// END Test Number 4

// BEGIN Test Number 5
testNo = 5; // A and B
selALUOp = 4'b0010;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'h10428094)
	 $display("TestNo 5 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 5 branch mismatch");
// END Test Number 5

// BEGIN Test Number 6
testNo = 6; // A or B
selALUOp = 4'b0011;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'hffffafb6)
	 $display("TestNo 6 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 6 branch mismatch");
// END Test Number 6

// BEGIN Test Number 7
testNo = 7; // A xor B
selALUOp = 4'b0100;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'hefbd2f22)
	 $display("TestNo 7 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 7 branch mismatch");
// END Test Number 7

// BEGIN Test Number 8
testNo = 8; // A << B(4:0) shift left logical
selALUOp = 4'b0101;
A = 32'hf0c3a596;
B = 32'h00000008;
#(1 * period);
if (ALUOut !== 32'hc3a59600)
	 $display("TestNo 8 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 8 branch mismatch");
// END Test Number 8

// BEGIN Test Number 9
testNo = 9; // A >> B(4:0) shift right logical
selALUOp = 4'b0110;
A = 32'hf0c3a596;
B = 32'h00000008;
#(1 * period);
if (ALUOut !== 32'h00f0c3a5)
	 $display("TestNo 9 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 9 branch mismatch");
// END Test Number 9

// BEGIN Test Number 10
testNo = 10; // A >>> B(4:0) shift right arithmetic
selALUOp = 4'b0111;
A = 32'hf0c3a596;
B = 32'h00000008;
#(1 * period);
if (ALUOut !== 32'hfff0c3a5)
	 $display("TestNo 10 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 10 branch mismatch");
// END Test Number 10

// BEGIN Test Number 11
testNo = 11; // 1 if sgn A < sgn B
selALUOp = 4'b1000;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'h00000001)
	 $display("TestNo 11 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 11 branch mismatch");
// END Test Number 11

// BEGIN Test Number 12
testNo = 12; // 1 if uns A < uns B
selALUOp = 4'b1001;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'h00000000)
	 $display("TestNo 12 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 12 branch mismatch");
// END Test Number 12

// BEGIN Test Number 13
testNo = 13; // branch = 1 if A = B
selALUOp = 4'b1010;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'h00000001)
	 $display("TestNo 13 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 13 branch mismatch");
// END Test Number 13

// BEGIN Test Number 14
testNo = 14; // branch = 1 if A = B
selALUOp = 4'b1010;
A = 32'hf0c3a596;
B = 32'hf0c3a596;
#(1 * period);
if (ALUOut !== 32'h00000002)
	 $display("TestNo 14 ALUOut mismatch");
if (branch !== 1'b1)
	 $display("TestNo 14 branch mismatch");
// END Test Number 14

// BEGIN Test Number 15
testNo = 15; // branch = 1 if A != B
selALUOp = 4'b1011;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'h00000003)
	 $display("TestNo 15 ALUOut mismatch");
if (branch !== 1'b1)
	 $display("TestNo 15 branch mismatch");
// END Test Number 15

// BEGIN Test Number 1
testNo = 1; // 16
selALUOp = 4'b1011;
A = 32'hf0c3a596;
B = 32'hf0c3a596;
#(0 * period);
if (ALUOut !== 32'h00000004)
	 $display("TestNo 1 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 1 branch mismatch");
// END Test Number 1

// BEGIN Test Number 17
testNo = 17; // branch = 1 if sgn A < sgnB
selALUOp = 4'b1100;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'h00000005)
	 $display("TestNo 17 ALUOut mismatch");
if (branch !== 1'b1)
	 $display("TestNo 17 branch mismatch");
// END Test Number 17

// BEGIN Test Number 1
testNo = 1; // 18
selALUOp = 4'b1100;
A = 32'hf0c3a596;
B = 32'hf0c3a596;
#(0 * period);
if (ALUOut !== 32'h00000006)
	 $display("TestNo 1 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 1 branch mismatch");
// END Test Number 1

// BEGIN Test Number 19
testNo = 19; // branch = 1 if sgn A >= sgnB
selALUOp = 4'b1101;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'h00000007)
	 $display("TestNo 19 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 19 branch mismatch");
// END Test Number 19

// BEGIN Test Number 1
testNo = 1; // 20
selALUOp = 4'b1101;
A = 32'hf0c3a596;
B = 32'hf0c3a596;
#(1 * period);
if (ALUOut !== 32'h00000008)
	 $display("TestNo 1 ALUOut mismatch");
if (branch !== 1'b1)
	 $display("TestNo 1 branch mismatch");
// END Test Number 1

// BEGIN Test Number 21
testNo = 21; // branch = 1 if uns A < uns B
selALUOp = 4'b1110;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'h00000009)
	 $display("TestNo 21 ALUOut mismatch");
if (branch !== 1'b0)
	 $display("TestNo 21 branch mismatch");
// END Test Number 21

// BEGIN Test Number 1
testNo = 1; // 22
selALUOp = 4'b1110;
A = 32'hf0c3a593;
B = 32'hf0c3a596;
#(1 * period);
if (ALUOut !== 32'h00000010)
	 $display("TestNo 1 ALUOut mismatch");
if (branch !== 1'b1)
	 $display("TestNo 1 branch mismatch");
// END Test Number 1

// BEGIN Test Number 23
testNo = 23; // branch = 1 if uns A >= uns B
selALUOp = 4'b1111;
A = 32'hf0c3a596;
B = 32'h1f7e8ab4;
#(1 * period);
if (ALUOut !== 32'h00000011)
	 $display("TestNo 23 ALUOut mismatch");
if (branch !== 1'b1)
	 $display("TestNo 23 branch mismatch");
// END Test Number 23

// BEGIN Test Number 1
testNo = 1; // 24
selALUOp = 4'b1111;
A = 32'hf0c3a596;
B = 32'hf0c3a596;
#(1 * period);
if (ALUOut !== 32'h00000012)
	 $display("TestNo 1 ALUOut mismatch");
if (branch !== 1'b1)
	 $display("TestNo 1 branch mismatch");
// END Test Number 1

// END Testbench stimulus

// Print simulation runtime in ns
$display("Simulation end time is %0t ns",$time);
endOfSim = 1'b1; // Stop CLK signal

end
endmodule