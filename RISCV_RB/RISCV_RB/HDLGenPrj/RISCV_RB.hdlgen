<?xml version="1.0" ?>
<HDLGen>
	<genFolder>
		<vhdl_folder>RISCV_RB/VHDL/model</vhdl_folder>
		<vhdl_folder>RISCV_RB/VHDL/testbench</vhdl_folder>
		<vhdl_folder>RISCV_RB/VHDL/ChatGPT</vhdl_folder>
		<vhdl_folder>RISCV_RB/VHDL/ChatGPT/Backups</vhdl_folder>
		<vhdl_folder>RISCV_RB/VHDL/AMDprj</vhdl_folder>
	</genFolder>
	<projectManager>
		<settings>
			<name>RISCV_RB</name>
			<environment>C:\videodemo\HDLGen-ChatGPT\User_Projects\RISCV_RB</environment>
			<location>C:\videodemo\HDLGen-ChatGPT\User_Projects\RISCV_RB\RISCV_RB</location>
			<info>None</info>
		</settings>
		<EDA>
			<tool>
				<name>Xilinx Vivado</name>
				<dir>C:/Xilinx/Vivado/2023.2/bin/vivado.bat</dir>
				<version>2019.1</version>
			</tool>
		</EDA>
		<HDL>
			<language>
				<name>VHDL</name>
			</language>
		</HDL>
	</projectManager>
	<hdlDesign>
		<header>
			<compName>RISCV_RB</compName>
			<title>32 x 32-bit Register Bank, with chip enable. Single synchronous write port, dual combinational read ports</title>
			<description>if RWr = 1  &amp;#10;      if rd  &amp;gt; 0  &amp;#10;        x(rd) = WBDat      synchronous write&amp;#10;&amp;#10;readReg dual combinational read ports&amp;#10;rs1D = x(rs1)&amp;#10;rs2D = x(rs2)&amp;#10;&amp;#10;Using CSArray in the HDLGen-ChatGPT project&amp;#44; i.e&amp;#44; CSArray(31:0)(31:0))&amp;#10;&amp;#10;&amp;#10;rather than x(31:0)(31:0)</description>
			<authors>Fearghal Morgan</authors>
			<company>University of Galway</company>
			<email>fearghal.morgan@universityofgalway.ie</email>
			<date>08/05/2024</date>
		</header>
		<clkAndRst>
			<clkAndRst>
				<activeClkEdge>L-H</activeClkEdge>
				<rst>Yes</rst>
				<RstType>asynch</RstType>
				<ActiveRstLvl>1</ActiveRstLvl>
			</clkAndRst>
		</clkAndRst>
		<entityIOPorts>
			<signal>
				<name>RWr</name>
				<mode>in</mode>
				<type>single bit</type>
				<description>Synchronous register write enable, high asserted</description>
			</signal>
			<signal>
				<name>rd</name>
				<mode>in</mode>
				<type>bus(4 downto 0)</type>
				<description>Destination register address, address 0 - 31</description>
			</signal>
			<signal>
				<name>rs1</name>
				<mode>in</mode>
				<type>bus(4 downto 0)</type>
				<description>Source register 1 address</description>
			</signal>
			<signal>
				<name>rs2</name>
				<mode>in</mode>
				<type>bus(4 downto 0)</type>
				<description>Source register 2 address</description>
			</signal>
			<signal>
				<name>rs1D</name>
				<mode>out</mode>
				<type>bus(31 downto 0)</type>
				<description>Source register 1 data&amp;#44; read combinationally</description>
			</signal>
			<signal>
				<name>rs2D</name>
				<mode>out</mode>
				<type>bus(31 downto 0)</type>
				<description>Source register 2 data</description>
			</signal>
			<signal>
				<name>WBDat</name>
				<mode>in</mode>
				<type>bus(31 downto 0)</type>
				<description>Writeback data. Selected datapath for RB writes.</description>
			</signal>
			<signal>
				<name>ce</name>
				<mode>in</mode>
				<type>single bit</type>
				<description>Chip enable, asserted high</description>
			</signal>
			<signal>
				<name>clk</name>
				<mode>in</mode>
				<type>single bit</type>
				<description>System clk strobe&amp;#44; rising edge active</description>
			</signal>
			<signal>
				<name>rst</name>
				<mode>in</mode>
				<type>single bit</type>
				<description>ASynchronous rst signal&amp;#44; asserted h clear all registers immediately.</description>
			</signal>
		</entityIOPorts>
		<internalSignals>
			<signal>
				<name>NSArray</name>
				<type>array,array32x32</type>
				<description>Register array next state signal</description>
			</signal>
			<signal>
				<name>CSArray</name>
				<type>array,array32x32</type>
				<description>Register array current state signal</description>
			</signal>
		</internalSignals>
		<architecture>
			<archName>RTL</archName>
			<process>
				<label>NSDecode_p</label>
				<inputSignal>RWr</inputSignal>
				<inputSignal>rd</inputSignal>
				<inputSignal>WBDat</inputSignal>
				<inputSignal>CSArray</inputSignal>
				<defaultOutput>NSArray,CSArray</defaultOutput>
				<note>if RWr = 1&amp;#10;   if rd &amp;gt; 0&amp;#10;      NSArray(rd) = WBDat&amp;#10;  end if&amp;#10;end if</note>
			</process>
			<concurrentStmt>
				<label>rs1D_c</label>
				<statement>rs1D,zero</statement>
				<note>CSArray(rs1)</note>
			</concurrentStmt>
			<concurrentStmt>
				<label>rs2D_c</label>
				<statement>rs2D,zero</statement>
				<note>CSArray(rs2)</note>
			</concurrentStmt>
			<process>
				<label>stateReg_p</label>
				<inputSignal>clk</inputSignal>
				<inputSignal>rst</inputSignal>
				<defaultOutput>CSArray,zero,NSArray,N/A</defaultOutput>
				<note>None</note>
			</process>
		</architecture>
		<testbench>
			<TBNote>Signals	RWr	rd	rs1	rs2	WBDat	ce	rs1D	rs2D	Delay	TestNo	Note
Mode	in	in	in	in	in	in	out	out	None	None	None
Radix	1'b	5'h	5'h	5'h	32'h	1'b	32'h	32'h	None	None	None
=	=	=	=	=	=	=	=	=	=	=	=
	1	00100	00100	00100	deadbeef	1	deadbeef	deadbeef	1	1	Note for test number 1
	1	00101	00100	00101	c001cafe	1	deadbeef	c001cafe	1	2	Note for test number 2
	1	00110	00110	00100	f00dcafe	1	f00dcafe	deadbeef	1	3	Note for test number 3
	1	00110	00110	00110	a5a5a5a5	1	f00dcafe	f00dcafe	0.1	4	Note for test number 1
	1	00110	00110	00101	a5a5a5a5	1	a5a5a5a5	c001cafe	0.9	5	Note for test number 2
	1	11111	11111	00110	3c3c3c3c	1	3c3c3c3c	a5a5a5a5	3	6	Note for test number 3
	1	00000	11111	00000	5a5a5a5a	1	3c3c3c3c	00000000	3	7	Note for test number 1
	1	00100	00100	11111	c001100c	0	deadbeef	3c3c3c3c	1	8	Note for test number 2
	1	00100	00100	00100	c001100c	1	c001100c	c001100c	1	9	Note for test number 3
	0	00110	00110	00110	ffffffff	1	a5a5a5a5	a5a5a5a5	1	10	Note for test number 1
	1	00001	00001	00001	ffffffff	1	ffffffff	ffffffff	1	11	Note for test number 2
# Example of a comment - comments are ignored by the testplan generator											
# HDLGen-ChatGPT Test Specification											
# Title: 32 x 32-bit Register Bank&amp;#44; with chip enable. Single synchronous write port&amp;#44; dual combinational read ports											
# Created by: Fearghal Morgan											
# Date: 08/05/2024											
# Component type: Register-Transfer Logic</TBNote>
		</testbench>
		<chatgpt>
			<commands>
				<VHDLModel>~ Notes START ===============&amp;#10;~ &amp;quot;~&amp;quot; is comment line prefix&amp;#10;&amp;#10;~ 1. HDLGen-ChatGPT builds the ChatGPT HDL model completion prompt.&amp;#10;~ The prompt includes the following sections&amp;#10;~ a) ChatGPT HDL model completion prompt header&amp;#44; instructing ChatGPT&amp;#10;~ The prompts included in this file have been developed following testing on a range or combinational&amp;#44; sequential and hierarchical designs.&amp;#10;~ Each prompt has an accompanying explanation (in a comment)&amp;#10;~ Prompts are included which request generate of specific code output&amp;#10;~ Prompts are included which request avoidance of generating specific code output&amp;#10;~ b) HDL model template&amp;#44; generated by HDLGen-ChatGPT.&amp;#10;&amp;#10;~ 2. The VHDL model template includes the following sections:&amp;#10;~ Title (creation date&amp;#44; component name&amp;#44; description&amp;#44; creator details&amp;#44; signal dictionary)&amp;#10;~ VHDL library declarations&amp;#44; including IEEE 1164 (VHDL) libraries&amp;#44; IEEE.numeric_std library and a MainPackage library&amp;#44; located in the project environment folder.&amp;#10;~ VHDL entity declaration&amp;#44; describing input and output signals and their signal types&amp;#10;~ VHDL architecture&amp;#10;~ Internal signal declarations&amp;#10;~ Component declarations&amp;#44; if the design references hierarchical components&amp;#10;~ VHDL processes&amp;#44; possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation&amp;#10;~ VHDL component instantiations&amp;#44; if the design is hierarchical&amp;#10;~ VHDL concurrent statements&amp;#44; possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation&amp;#10;&amp;#10;~ 3. HDLGen-ChatGPT (https://github.com/fearghal1/HDLGen-ChatGPT)has been tested primarily using the free GPT-3.5&amp;#10;~ Later (subscription-based) GPT releases are expected to produce similar or better quality results&amp;#10;~ Note that ChatGPT does not always generate output exactly as expected&amp;#10;&amp;#10;~ 4. You can modify/edit this ChatGPT HDL model completion prompt header. If so&amp;#44; include explanatiom using the ~ comment prefix&amp;#10;&amp;#10;~ 5. Individual prompts (from this list&amp;#44; or new prompts) can be submitted as individual prompts&amp;#44; following a ChatGPT run&amp;#44; to refine the output&amp;#10;~ Examples:&amp;#10;~ Enter &amp;apos;continue&amp;apos; to continue incomplete output to a code box&amp;#10;~ Click the ChatGPT menu &amp;apos;&amp;gt; Continue generating&amp;apos; button if it appears&amp;#44; to continue incomplete output to a code box&amp;#10;~ Copy any prompt from this file and paste in the ChatGPT message box and click the arrow&amp;#10;~ Type a new prompt in the ChatGPT message box and click the arrow&amp;#10;~ Notes END&amp;#x9;===============&amp;#10;&amp;#10;~ Main prompt to ChatGPT&amp;#10;Complete the following VHDL model&amp;#44; and output in a single formatted code box.&amp;#10;&amp;#10;~ The next lines are auto-populated by HDLGen-ChatGPT&amp;#44; based on process and concurrent statements in the VHDL model template.&amp;#10;~ In HDLGen-ChatGPT &amp;apos;Generate &amp;gt; Edit ChatGPT Prompt Header&amp;apos; menu&amp;#44; uncomment one of the following lines to output a specific selected process or concurrent statement.&amp;#10;~***Reserved for processes***&amp;#10;~***Reserved for concurrent statements***&amp;#10;&amp;#10;~ Retain VHDL comments unchanged&amp;#10;Do not remove any comments beginning with &amp;apos;-- &amp;apos;&amp;#44; i.e&amp;#44; only two dashes&amp;#10;&amp;#10;~ Enhance the title section text&amp;#44; e.g&amp;#44; align and format text&amp;#10;~ Remove/add the comment (~) character on the next two lines&amp;#44; to activate/deactivate.&amp;#10;~ Deactivation speeds up the ChatGPT HDL model completion&amp;#44; by removing the title section generation.&amp;#10;~ Do not include the code between and including lines &amp;apos;-- Title Section Start&amp;apos; and &amp;apos;-- Title Section End&amp;apos;.&amp;#10;For each line between -- Title section start and -- Title section end&amp;#44; improve the text formatting&amp;#10;&amp;#10;For each line containing the prefix &amp;apos;---&amp;apos;&amp;#44; generate VHDL code describing the logic&amp;#44; applying the following rules.&amp;#10;~ Translate model combination logic pseudo code lines which include the &amp;apos;---&amp;apos; prefix to syntactically-correct HDL.&amp;#10;Remove the &amp;apos;--- &amp;apos;  prefix from the line.&amp;#10;~ Remove the --- after processing.&amp;#10;&amp;#10;For arithmetic operations&amp;#44; use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.&amp;#10;~ If ChatGPT generates addOut &amp;lt;= addin1 + addIn0;  for std_logic_vector signals&amp;#44; the EDA tool may highlight an error&amp;#44;&amp;#10;~  such as &amp;apos;Cannot determine exact overloaded match definition for &amp;quot;+&amp;quot;&amp;apos;&amp;#10;~ If so&amp;#44; re-run the above prompt&amp;#10;~ Arithmetic operations are supported by the IEEE.numeric_std library&amp;#44; https://redirect.cs.umbc.edu/portal/help/VHDL/packages/numeric_std.vhd&amp;#10;~ e.g&amp;#44; operations such as + (addition) often require input signal type conversion to support the overloaded operator functions&amp;#44;&amp;#10;~ + function supports the following overloaded operations&amp;#10;~ -- Id: A.3  function &amp;quot;+&amp;quot; ( L&amp;#44;R: UNSIGNED)           return UNSIGNED&amp;#10;~ -- Id: A.4  function &amp;quot;+&amp;quot; ( L&amp;#44;R: SIGNED)             return SIGNED;&amp;#10;~ -- Id: A.5  function &amp;quot;+&amp;quot; ( L: UNSIGNED; R: NATURAL) return UNSIGNED;&amp;#10;~ -- Id: A.6  function &amp;quot;+&amp;quot; ( L: NATURAL; R: UNSIGNED) return UNSIGNED;&amp;#10;~ -- Id: A.7  function &amp;quot;+&amp;quot; ( L: INTEGER; R: SIGNED)   return SIGNED;&amp;#10;~ -- Id: A.8  function &amp;quot;+&amp;quot; ( L: SIGNED; R: INTEGER)   return SIGNED;&amp;#10;~ Example: addOut &amp;lt;= std_logic_vector (unsigned(addin1) + unsigned(addIn0) );&amp;#10;~  Uses A.3 function &amp;quot;+&amp;quot; ( L&amp;#44;R: UNSIGNED) return UNSIGNED&amp;#10;~  Adds two std_logic_vector (slv) signals. Convert (type cast) slv signals to unsigned type&amp;#44; perform +&amp;#44; and then type cast the unsigned result to std_logic_vector type&amp;#10;&amp;#10;If a line includes a std_logic_vector signal as an array index&amp;#44; convert the signal to an integer index using &amp;quot;ieee.numeric_std&amp;quot; package to_integer(unsigned()).&amp;#10;~ If using a std_logic_vector signal as an integer index&amp;#44; convert (type cast) the signal to unsigned type&amp;#44;&amp;#10;~ and the unsigned signal to integer type (TO_INTEGER function D.1) and use as integer array index&amp;#10;~ -- Id: D.1  function TO_INTEGER ( ARG: UNSIGNED) return NATURAL;&amp;#10;~ -- Id: D.2  function TO_INTEGER ( ARG: SIGNED) return INTEGER;&amp;#10;~ -- Id: D.3  function TO_UNSIGNED (  ARG&amp;#44;SIZE: NATURAL) return UNSIGNED;&amp;#10;~ -- Id: D.4  function TO_SIGNED ( ARG: INTEGER; SIZE: NATURAL) return SIGNED;&amp;#10;~ -- Id: D.5  function TO_UNSIGNED ( ARG: STD_LOGIC_VECTOR) return UNSIGNED;&amp;#10;~ -- Id: D.6  function TO_SIGNED ( ARG: STD_LOGIC_VECTOR) return SIGNED;&amp;#10;~ -- Id: D.7  function TO_STDLOGICVECTOR ( ARG: UNSIGNED) return STD_LOGIC_VECTOR;&amp;#10;~ -- Id: D.8  function TO_STDLOGICVECTOR ( ARG: SIGNED) return STD_LOGIC_VECTOR;&amp;#10;&amp;#10;Convert shift_left and shift_right function outputs to signal type std_logic_vector.&amp;#10;~ Bit shift handling&amp;#10;~ This assumes that the target signal type is std_logic_vector. If not so&amp;#44; remove or modify the above line.&amp;#10;Only use ieee.numeric_std package shift_left or shift_right functions&amp;#44; and do not use sra&amp;#44; srl&amp;#44; sll&amp;#44; shift_right_arithmetic functions&amp;#44; introduced in IEEE VHDL-2008&amp;#10;~ Self-explanatory&amp;#10;If a line includes a &amp;gt;&amp;gt;&amp;gt; shift right arithmetic operation&amp;#44; use ieee.numeric_std package shift_right function&amp;#44; assuming signed data.&amp;#10;~ Use &amp;gt;&amp;gt;&amp;gt; pseudo code operator for shift right arithmetic operation. VHDL functions require signed input signals.&amp;#10;&amp;#10;Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4&amp;#44; extending the hex value to the exact width of the target signal.&amp;#10;Make assignment and equality check bit widths compatible.&amp;#10;~ Self-explanatory&amp;#10;&amp;#10;Leave all labels unchanged.&amp;#10;~ HDLGen-ChatGPT captures the labels for the design processes&amp;#44; concurrent statements and component instantiation.&amp;#10;~ Labels are used for browsing the design in the EDA tools.&amp;#10;&amp;#10;For each line containing &amp;apos;_c:&amp;apos; in the label&amp;#44; generate a concurrent VHDL statement&amp;#44; do not generate a process statement&amp;#44; do not remove the label&amp;#44; remove the &amp;apos;---&amp;apos;&amp;#44; and remove &amp;apos;-- Default assignment&amp;apos;&amp;#10;~ Avoids ChatGPT translating a VHDL concurrent statement (labelled _c) into a VHDL process statement&amp;#10;&amp;#10;Remove all assignments in if or case statements which duplicate the default assignment.&amp;#10;Include null in others case statement if a default assignment is included in a case statement&amp;#10;~ HDLGen-ChatGPT &amp;apos;Architecture &amp;gt; process&amp;apos; menu uses the following menus and combinational process logic description approach&amp;#10;~ default signal assignment&amp;#10;~ non-default signal assignment&amp;#10;~ The default signal assignment is only required once. This prompt avoids ChatGPT including duplicates.&amp;#10;&amp;#10;For all case statements&amp;#44; include &amp;quot;when others =&amp;gt; null;&amp;quot; before every occurrence of an &amp;quot;end case&amp;quot; statement.&amp;#10;~ VHDL syntax requirement&amp;#10;&amp;#10;Within all VHDL processes&amp;#44; do not remove the line containing &amp;apos;-- Default assignment&amp;apos;&amp;#44; and place it immediately before the VHDL statements generated for lines containing prefix &amp;apos;--- &amp;apos;.&amp;#10;~ Avoids ChatGPT incorrectly re-ordering statements&amp;#44; and ensures the correct ordering of VHDL statements&amp;#44; provided in HDLGen-ChatGPT HDL template&amp;#10;&amp;#10;In assignments which include signals with one bit extension&amp;#44; e.g&amp;#44; (0 &amp;amp; CSUpr) or  (1 &amp;amp; CSUpr)&amp;#44; use single quotes around the single bit value 0 or 1 and do not use double quotes &amp;quot;&amp;quot;.&amp;#10;For example&amp;#44; generate (&amp;apos;0&amp;apos; &amp;amp; CSUpr) from VHDL (0 &amp;amp; CSUpr)&amp;#10;~ Extending a signal&amp;#10;~ Example: addOut &amp;lt;= std_logic_vector(unsigned(&amp;apos;0&amp;apos; &amp;amp; CSUpr) + unsigned(&amp;apos;0&amp;apos; &amp;amp; addInB)); where addOut signal is 6-bit std_logic_vector(5 downto 0)&amp;#44; CSRUpr / addInB signals are 5-bit std_logic_vector(4 downto 0)&amp;#10;&amp;#10;Do not remove any library statements&amp;#44; do not add any new library &amp;apos;use&amp;apos; statements&amp;#44; to avoid conflicts with the ieee.numeric_std package functions.&amp;#10;~ Self explanatory&amp;#10;&amp;#10;Only use VHDL which is support by the IEEE VHDL-1987 standard.&amp;#10;~ Not all Electronic Design Automation (EDA) tools support VHDL-2008&amp;#44; so stick with VHDL-1987 standard&amp;#10;&amp;#10;In all VHDL processes&amp;#44; replace each conditional when else statement with a case statement or an if statement&amp;#44; without removing any signal state check&amp;#44; and not including any assignments which duplicate the assignment labelled &amp;apos;-- Default assignment&amp;apos;&amp;#10;~ Conditional statements are supported in IEEE VHDL-2008 though not all EDA tools support VHDL-2008&amp;#44; so do not allow conditional statements&amp;#10;~ ChatGPT does not always follow this prompt&amp;#44; so it may be necessary to submit this prompt again&amp;#44; after the ChatGPT run.&amp;#10;&amp;#10;For signal which have a digit boundary width&amp;#44; use hexadecimal format in constant assignments&amp;#44; with &amp;apos;x&amp;apos; prefix before double quotation marks.</VHDLModel>
				<VerilogModel># This ChatGPT message header is used with the HDLGen-generated HDL model template (which can include pseudo code logic descriptions) to generate the complete HDL model.&amp;#10;&amp;#10;Complete the following Verilog model&amp;#44; and output in a single formatted code box.&amp;#10;&amp;#10;For each line between // Title section start and // Title section end&amp;#44; improve formatting of the text.&amp;#10;&amp;#10;Do not include input or output keywords in the module declaration&amp;#10;&amp;#10;For each line containing the prefix &amp;apos;///&amp;apos;&amp;#44; replace with generated Verilog code for the logic described&amp;#44; and remove the &amp;apos;///&amp;apos;.&amp;#10;&amp;#10;For each line containing &amp;apos;_c:&amp;apos; in the label&amp;#44; do not generate a sequential statement&amp;#44; do not remove the label containing &amp;apos;_c:&amp;apos;&amp;#44; remove the &amp;apos;///&amp;apos;&amp;#44; and remove &amp;apos;// Default assignment&amp;apos;&amp;#10;&amp;#10;In VERILOG processes&amp;#44; do not remove the line containing suffix &amp;apos;// Default assignment&amp;apos;&amp;#44; and place it immediately before the VERILOG statements generated for lines containing prefix &amp;apos;/// &amp;apos;.&amp;#10;Place the line containing suffix &amp;apos;// Default assignment&amp;apos; immediately before the VERILOG if statement in lines containing prefix &amp;apos;///&amp;apos;.&amp;#10;Use for loop (format for (i=0; i&amp;lt;32; i=i+1) around complete array signal assignments.&amp;#10;&amp;#10;Leave all labels unchanged.&amp;#10;Place the Verilog process line containing &amp;apos;// Default assignment&amp;apos;&amp;#44; unchanged&amp;#44; and immediately before the VHDL logic generated for lines containing prefix &amp;apos;///&amp;apos;.&amp;#10;Do not output the lines containing prefix &amp;apos;///&amp;apos;.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Include &amp;lt;= operator in assignments.&amp;#10;Make assignment bit widths compatible.&amp;#10;&amp;#10;Keep all { and } characters in the generated Verilog&amp;#10;Keep case assignments separate&amp;#44; as specified in the ChatGPT prompt.&amp;#10;&amp;#10;&amp;#10;&amp;#10;For &amp;lt;&amp;lt;&amp;lt; shift right arithmetic assignment&amp;#44; apply the shift operation on the signed signal value&amp;#44; using $signed()&amp;#10;Remove all lines which contain default:&amp;#10;&amp;#10;&amp;#10;=== For reference. Ignore the following lines.&amp;#10;=== List of Optional ChatGPT messages&amp;#44; which can be submitted individually after the above ChatGPT message&amp;#44; if the Chat GPT output is not fully correct.&amp;#10;Repeat&amp;#44; without outputting lines between &amp;apos;-- Title section start&amp;apos; and &amp;apos;-- Title section end&amp;apos;</VerilogModel>
			</commands>
		</chatgpt>
	</hdlDesign>
</HDLGen>