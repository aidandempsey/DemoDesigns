





Complete the following VHDL model, and output in a single formatted code box.


Do not remove any comments beginning with '-- ', i.e, only two dashes

For each line between -- Title section start and -- Title section end, improve the text formatting

For each line containing the prefix '---', generate VHDL code describing the logic, applying the following rules.
Remove the '--- '  prefix from the line.

For arithmetic operations, use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.

If a line includes a std_logic_vector signal as an array index, convert the signal to an integer index using "ieee.numeric_std" package to_integer(unsigned()).

Convert shift_left and shift_right function outputs to signal type std_logic_vector.
Only use ieee.numeric_std package shift_left or shift_right functions, and do not use sra, srl, sll, shift_right_arithmetic functions, introduced in IEEE VHDL-2008
If a line includes a >>> shift right arithmetic operation, use ieee.numeric_std package shift_right function, assuming signed data.

Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4, extending the hex value to the exact width of the target signal.
Make assignment and equality check bit widths compatible.

Leave all labels unchanged.

For each line containing '_c:' in the label, generate a concurrent VHDL statement, do not generate a process statement, do not remove the label, remove the '---', and remove '-- Default assignment'

Remove all assignments in if or case statements which duplicate the default assignment.
Include null in others case statement if a default assignment is included in a case statement

For all case statements, include "when others => null;" before every occurrence of an "end case" statement.

Within all VHDL processes, do not remove the line containing '-- Default assignment', and place it immediately before the VHDL statements generated for lines containing prefix '--- '.

In assignments which include signals with one bit extension, e.g, (0 & CSUpr) or  (1 & CSUpr), use single quotes around the single bit value 0 or 1 and do not use double quotes "".
For example, generate ('0' & CSUpr) from VHDL (0 & CSUpr)

Do not remove any library statements, do not add any new library 'use' statements, to avoid conflicts with the ieee.numeric_std package functions.

Only use VHDL which is support by the IEEE VHDL-1987 standard.

In all VHDL processes, replace each conditional when else statement with a case statement or an if statement, without removing any signal state check, and not including any assignments which duplicate the assignment labelled '-- Default assignment'

For signal which have a digit boundary width, use hexadecimal format in constant assignments, with 'x' prefix before double quotation marks.

-- Title Section Start
-- Generated by HDLGen, Github https://github.com/fearghal1/HDLGen-ChatGPT, on 21-September-2023 at 13:33

-- Component Name : RISCV_RB
-- Title          : 32 x 32-bit Register Bank, with chip enable. Single synchronous write port, dual combinational read ports

-- Author(s)      : Fearghal Morgan
-- Organisation   : University of Galway
-- Email          : fearghal.morgan@universityofgalway.ie
-- Date           : 21/09/2023

-- Description
-- if RWr = 1  
--       if rd  > 0  
--         x(rd) = WBDat      synchronous write
-- 
-- readReg dual combinational read ports
-- rs1D = x(rs1)
-- rs2D = x(rs2)
-- 
-- Using CSArray in the HDLGen-ChatGPT project, i.e, CSArray(31:0)(31:0))
-- 
-- 
-- rather than x(31:0)(31:0)

-- entity signal dictionary
-- RWr	Synchronous register write enable, high asserted
-- rd	Destination register address, address 0 - 31
-- rs1	Source register 1 address
-- rs2	Source register 2 address
-- rs1D	Source register 1 data, read combinationally
-- rs2D	Source register 2 data
-- WBDat	Writeback data. Selected datapath for RB writes.
-- ce	Chip enable, asserted high
-- clk	System clk strobe, rising edge active
-- rst	ASynchronous rst signal, asserted h clear all registers immediately.

-- internal signal dictionary
-- NSArray	Register array next state signal
-- CSArray	Register array current state signal

-- Title Section End
-- library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.MainPackage.all;

-- entity declaration
entity RISCV_RB is 
Port(
	RWr : in std_logic;
	rd : in std_logic_vector(4 downto 0);
	rs1 : in std_logic_vector(4 downto 0);
	rs2 : in std_logic_vector(4 downto 0);
	rs1D : out std_logic_vector(31 downto 0);
	rs2D : out std_logic_vector(31 downto 0);
	WBDat : in std_logic_vector(31 downto 0);
	ce : in std_logic;
	clk : in std_logic;
	rst : in std_logic
);
end entity RISCV_RB;

architecture RTL of RISCV_RB is
-- Internal signal declarations
signal NSArray : array32x32  := ( others => (others => '0') );
signal CSArray : array32x32  := ( others => (others => '0') );

begin

NSDecode_p: process(RWr,rd,WBDat,CSArray)
begin
	NSArray <= CSArray;-- Default assignment 
	
--- if RWr = '1'
--- if rd > '0'
--- NSArray(rd) = WBDat
--- end if
---end if
end process;

--- rs1D_c: rs1D <= CSArray(rs1);


--- rs2D_c: rs2D <= CSArray(rs2);


stateReg_p: process(clk,rst)
begin
	if rst = '1' then
		CSArray <= (others =>(others => '0'));
	elsif rising_edge(clk) then
		CSArray <= NSArray;
	end if;
end process;

end RTL;