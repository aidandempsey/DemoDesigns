

The table is included at the end of the prompt.


The format of the table is as follows
Row 1 includes input signal name headings
Row 2 includes output signal name headings
Row 3 includes signal radix
Row 4 includes the following column headings
Column 1: TestNo
Column 2: delay
Other:    Note
Rows 5 onwards includes test data

Create and output a single VHDL process labelled stim_p, in a formatted code box, including the following, for each TestNo row:
Line space, as test code separator
Integer signal TestNo, using TestNo <= assignment.
Note column field, as a VHDL comment.
Assignment of each input signal value with the value included in the corresponding table column, not omitting any input signal name and never assigning an output signal.
Delay statement, format 'wait for (delay * period);', where delay is an integer or real value, never 0, placing the delay statement after all of the signal stimulus for the TestNo have been assigned, and always including brackets around the delay statement.
Comparison of every output signal (not input signals) with the binary or hexadecimal value included in its corresponding output signal column, outputting a separate warning (not failure) message for each individual signal test (including TestNo) if the values do not match, and using a separate assert statement, and unique message for each one. Do not include any input or internal signal names in the comparison statement. Ensure correct bit width in comparisons.

For signal which have a digit boundary width, use hexadecimal format in constant assignments, with 'x' prefix before double quotation marks.
For all input signals, ensure use of the correct values and the correct signal widths.
Do not include any VHDL 'for' loops in the output.
Do not include 'for testNo in ..'  or 'case TestNo ..' statements.
Do not include any VHDL variables.
Do not assign any output signals.
Do not include any other delay statements.
Do not request that I '-- Continue with the remaining test cases...'. Please output code for all of the tests.
Do not request that I '-- Repeat similar sections for the remaining tests...'. Please output code for all of the tests.
Do not request that I '-- Comparison of output signals with expected values...'. Please output code for all of the tests.
Do not request that I '-- Continue similar sections for the remaining tests...'. Please output code for all of the tests.

signal testNo: integer;
signal period: time := 20 ns;
signal RWr : std_logic;
signal rd : std_logic_vector(4 downto 0);
signal rs1 : std_logic_vector(4 downto 0);
signal rs2 : std_logic_vector(4 downto 0);
signal rs1D : std_logic_vector(31 downto 0);
signal rs2D : std_logic_vector(31 downto 0);
signal WBDat : std_logic_vector(31 downto 0);
signal ce : std_logic;

Inputs         ce   RWr  rd     WBDat     rs1    rs2
Outputs                                                 rs1D      rs2D
Radix          1'b  1'b  5'b    32'h      5'b    5'b    32'h      32'h      e.g, 2'b is 2 bit binary 
(10111), 32'h is 32-bit hexadecimal deadbeef 
TestNo  delay                                                               Note
1       1      1    1    00100  deadbeef  00100  00100  deadbeef  deadbeef  Write 
RB(4),        Read RB(4) on rs1D  and rs2D
2       1      1    1    00101  c001cafe  00100  00101  deadbeef  c001cafe  Write 
RB(5),        Read RB(4) on rs1D  and RB(5) on rs2D)
3       1      1    1    00110  f00dcafe  00110  00100  f00dcafe  deadbeef  Write RB(6),        
Read RB(6) on rs1D  and RB(4) on rs2D
4       0.1    1    1    00110  a5a5a5a5  00110  00110  f00dcafe  f00dcafe  No write 
until clk, Read RB(6) on rs1D  and rs2D
5       0.9    1    1    00110  a5a5a5a5  00110  00101  a5a5a5a5  c001cafe  Write 
RB(6) on clk, Read RB(6) on rs1D  and RB(5) on rs2D
6       3      1    1    11111  3c3c3c3c  11111  00110  3c3c3c3c  a5a5a5a5  Write 
RB(31),       Read RB(31) on rs1D and RB(6) on rs2D
7       3      1    1    00000  5a5a5a5a  11111  00000  3c3c3c3c  00000000  Write 
RB(0),        Read RB(31) on rs1D and RB(0)=0 on rs2D (write 0x5a5a5a5a to x0 
does not occur)
8       1      0    1    00100  c001100c  00100  11111  deadbeef  3c3c3c3c  Write 
RB(4) with ce deasserted. Read RB(4) on rs1D and RB(31) on rs2D
9       1      1    1    00100  c001100c  00100  00100  c001100c  c001100c  Write 
RB(4),        Read RB(4) on rs1D and rs2D
10      1      1    0    00110  ffffffff  00110  00110  a5a5a5a5  a5a5a5a5  Write RB(6),        
with RWr deasserted. Read RB(6)on rs1D and rs2D
11      1      1    1    00001  ffffffff  00001  00001  ffffffff  ffffffff  Write RB(1),        
Read RB(1)on rs1D and rs2D