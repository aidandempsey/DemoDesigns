-- Title Section Start
-- Generated by HDLGen, GitHub https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT, on 24-September-2024 at 13:23

-- Component Name : RISCV_RB
-- Title          : 32 x 32-bit Register Bank with chip enable. 
--                  Single synchronous write port and dual combinational read ports

-- Author(s)      : Fearghal Morgan
-- Organisation   : University of Galway
-- Email          : fearghal.morgan@universityofgalway.ie
-- Date           : 24/09/2024

-- Description
-- If RWr = '1' then  
--     if rd > '0' then  
--         x(rd) <= WBDat; -- synchronous write
-- 
-- Read registers through dual combinational read ports
-- rs1D <= x(rs1);
-- rs2D <= x(rs2);
-- 
-- Using CSArray in the HDLGen-ChatGPT project, i.e., CSArray(31:0)(31:0)
-- 
-- 
-- Rather than x(31:0)(31:0)

-- entity signal dictionary
-- RWr    : Synchronous register write enable, high asserted
-- rd     : Destination register address, range 0 - 31
-- rs1    : Source register 1 address
-- rs2    : Source register 2 address
-- rs1D   : Source register 1 data, read combinationally
-- rs2D   : Source register 2 data
-- WBDat  : Writeback data. Selected datapath for RB writes.
-- ce     : Chip enable, asserted high
-- clk    : System clock strobe, rising edge active
-- rst    : Asynchronous reset signal, asserted high clears all registers immediately.

-- internal signal dictionary
-- NSArray : Register array next state signal
-- CSArray : Register array current state signal

-- Title Section End
-- library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.MainPackage.all;

-- entity declaration
entity RISCV_RB is 
Port(
    RWr    : in std_logic;
    rd     : in std_logic_vector(4 downto 0);
    rs1    : in std_logic_vector(4 downto 0);
    rs2    : in std_logic_vector(4 downto 0);
    rs1D   : out std_logic_vector(31 downto 0);
    rs2D   : out std_logic_vector(31 downto 0);
    WBDat  : in std_logic_vector(31 downto 0);
    ce     : in std_logic;
    clk    : in std_logic;
    rst    : in std_logic
);
end entity RISCV_RB;

architecture RTL of RISCV_RB is
-- Internal signal declarations
signal NSArray : array32x32  := ( others => (others => '0') );
signal CSArray : array32x32  := ( others => (others => '0') );

begin

NSDecode_p: process(RWr, rd, WBDat, CSArray)
begin
    NSArray <= CSArray; -- Default assignment 
    
    if RWr = '1' then
        if to_integer(unsigned(rd)) > 0 then
            NSArray(to_integer(unsigned(rd))) <= WBDat;
        end if;
    end if;
end process;

rs1D_c: rs1D <= CSArray(to_integer(unsigned(rs1)));

rs2D_c: rs2D <= CSArray(to_integer(unsigned(rs2)));

stateReg_p: process(clk, rst)
begin
    if rst = '1' then
        CSArray <= (others => (others => '0'));
    elsif rising_edge(clk) then
        CSArray <= NSArray;
    end if;
end process;

end RTL;
