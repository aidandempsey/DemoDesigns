-- Title Section Start
-- VHDL Testbench - RISCV_RB_TB
-- Generated by HDLGen-ChatGPT on 24-September-2024 at 13:23
-- Github: https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT

-- Component Name:	RISCV_RB
-- Title:	32 x 32-bit Register Bank, with chip enable. Single synchronous write port, dual combinational read ports

-- Author(s):	Fearghal Morgan
-- Organisation:	University of Galway
-- Email:	fearghal.morgan@universityofgalway.ie
-- Date:	24/09/2024

-- Description:	 Refer to component's HDL Model for description and signal dictionary
-- Title Section End

-- Library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Testbench entity declaration
entity RISCV_RB_TB is end entity RISCV_RB_TB;

architecture behave of RISCV_RB_TB is

-- unit under test (UUT) component declaration. Identical to component entity, with 'entity' replaced with 'component'
component RISCV_RB is 
Port(
	RWr : in std_logic;
	rd : in std_logic_vector(4 downto 0);
	rs1 : in std_logic_vector(4 downto 0);
	rs2 : in std_logic_vector(4 downto 0);
	rs1D : out std_logic_vector(31 downto 0);
	rs2D : out std_logic_vector(31 downto 0);
	WBDat : in std_logic_vector(31 downto 0);
	ce : in std_logic;
	clk : in std_logic;
	rst : in std_logic 
	);
end component;

-- testbench signal declarations
signal testNo: integer; -- aids locating test in simulation waveform
signal endOfSim : boolean := false; -- assert at end of simulation to highlight simuation done. Stops clk signal generation.

-- Typically use the same signal names as in the VHDL entity, with keyword signal added, and without in/out mode keyword

signal clk: std_logic := '1';
signal rst: std_logic;        

signal RWr : std_logic;
signal rd : std_logic_vector(4 downto 0);
signal rs1 : std_logic_vector(4 downto 0);
signal rs2 : std_logic_vector(4 downto 0);
signal rs1D : std_logic_vector(31 downto 0);
signal rs2D : std_logic_vector(31 downto 0);
signal WBDat : std_logic_vector(31 downto 0);
signal ce : std_logic;

constant period: time := 20 ns; -- Default simulation time. Use as simulation delay constant, or clk period if sequential model ((50MHz clk here)
 
begin

-- Generate clk signal, when endOfSim = FALSE / 0
clkStim: clk <= not clk after period/2 when endOfSim = false else '0';

-- Instantiate the Unit Under Test (UUT)
-- Map the component's internal signals to testbench signals
UUT: RISCV_RB
port map
	(
	RWr => RWr, 
	rd => rd, 
	rs1 => rs1, 
	rs2 => rs2, 
	rs1D => rs1D, 
	rs2D => rs2D, 
	WBDat => WBDat, 
	ce => ce, 
	clk => clk, 
	rst => rst
	);

-- Signal stimulus process
-- Process automatically executes at start of simulation due to empty sensitivity list.
-- Process halts at the 'wait;' statement
stim_p: process
begin
	report "%N Simulation start, time = "& time'image(now);

	-- Apply default INPUT signal values.
	-- Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	-- if signal type is 'std_logic', use '0'
	-- if signal type is 'std_logic_vector' use (others => '0')
	-- if signal type is 'integer' use 0
	RWr <= '0';
	rd <= (others => '0');
	rs1 <= (others => '0');
	rs2 <= (others => '0');
	WBDat <= (others => '0');
	ce <= '0';
	report "Assert and toggle rst";
	testNo <= 0;
	rst    <= '1';
	wait for period*1.2; -- assert rst for 1.2*period, deasserting rst 0.2*period after active clk edge
	rst   <= '0';
	wait for period; -- wait 1 clock period
	
	-- START Testbench stimulus

	-- BEGIN Test Number 1
	testNo <= 1; -- Note for test number 1
	RWr <= '1';
	rd <= x"00100";
	rs1 <= x"00100";
	rs2 <= x"00100";
	WBDat <= x"deadbeef";
	ce <= '1';
	wait for (1 * period);
	assert rs1D = x"deadbeef" report "TestNo 1 rs1D mismatch" severity warning;
	assert rs2D = x"deadbeef" report "TestNo 1 rs2D mismatch" severity warning;
	-- END Test Number 1

	-- BEGIN Test Number 2
	testNo <= 2; -- Note for test number 2
	RWr <= '1';
	rd <= x"00101";
	rs1 <= x"00100";
	rs2 <= x"00101";
	WBDat <= x"c001cafe";
	ce <= '1';
	wait for (1 * period);
	assert rs1D = x"deadbeef" report "TestNo 2 rs1D mismatch" severity warning;
	assert rs2D = x"c001cafe" report "TestNo 2 rs2D mismatch" severity warning;
	-- END Test Number 2

	-- BEGIN Test Number 3
	testNo <= 3; -- Note for test number 3
	RWr <= '1';
	rd <= x"00110";
	rs1 <= x"00110";
	rs2 <= x"00100";
	WBDat <= x"f00dcafe";
	ce <= '1';
	wait for (1 * period);
	assert rs1D = x"f00dcafe" report "TestNo 3 rs1D mismatch" severity warning;
	assert rs2D = x"deadbeef" report "TestNo 3 rs2D mismatch" severity warning;
	-- END Test Number 3

	-- BEGIN Test Number 4
	testNo <= 4; -- Note for test number 1
	RWr <= '1';
	rd <= x"00110";
	rs1 <= x"00110";
	rs2 <= x"00110";
	WBDat <= x"a5a5a5a5";
	ce <= '1';
	wait for (0.1 * period);
	assert rs1D = x"f00dcafe" report "TestNo 4 rs1D mismatch" severity warning;
	assert rs2D = x"f00dcafe" report "TestNo 4 rs2D mismatch" severity warning;
	-- END Test Number 4

	-- BEGIN Test Number 5
	testNo <= 5; -- Note for test number 2
	RWr <= '1';
	rd <= x"00110";
	rs1 <= x"00110";
	rs2 <= x"00101";
	WBDat <= x"a5a5a5a5";
	ce <= '1';
	wait for (0.9 * period);
	assert rs1D = x"a5a5a5a5" report "TestNo 5 rs1D mismatch" severity warning;
	assert rs2D = x"c001cafe" report "TestNo 5 rs2D mismatch" severity warning;
	-- END Test Number 5

	-- BEGIN Test Number 6
	testNo <= 6; -- Note for test number 3
	RWr <= '1';
	rd <= x"11111";
	rs1 <= x"11111";
	rs2 <= x"00110";
	WBDat <= x"3c3c3c3c";
	ce <= '1';
	wait for (3 * period);
	assert rs1D = x"3c3c3c3c" report "TestNo 6 rs1D mismatch" severity warning;
	assert rs2D = x"a5a5a5a5" report "TestNo 6 rs2D mismatch" severity warning;
	-- END Test Number 6

	-- BEGIN Test Number 7
	testNo <= 7; -- Note for test number 1
	RWr <= '1';
	rd <= x"00000";
	rs1 <= x"11111";
	rs2 <= x"00000";
	WBDat <= x"5a5a5a5a";
	ce <= '1';
	wait for (3 * period);
	assert rs1D = x"3c3c3c3c" report "TestNo 7 rs1D mismatch" severity warning;
	assert rs2D = x"00000000" report "TestNo 7 rs2D mismatch" severity warning;
	-- END Test Number 7

	-- BEGIN Test Number 8
	testNo <= 8; -- Note for test number 2
	RWr <= '1';
	rd <= x"00100";
	rs1 <= x"00100";
	rs2 <= x"11111";
	WBDat <= x"c001100c";
	ce <= '0';
	wait for (1 * period);
	assert rs1D = x"deadbeef" report "TestNo 8 rs1D mismatch" severity warning;
	assert rs2D = x"3c3c3c3c" report "TestNo 8 rs2D mismatch" severity warning;
	-- END Test Number 8

	-- BEGIN Test Number 9
	testNo <= 9; -- Note for test number 3
	RWr <= '1';
	rd <= x"00100";
	rs1 <= x"00100";
	rs2 <= x"00100";
	WBDat <= x"c001100c";
	ce <= '1';
	wait for (1 * period);
	assert rs1D = x"c001100c" report "TestNo 9 rs1D mismatch" severity warning;
	assert rs2D = x"c001100c" report "TestNo 9 rs2D mismatch" severity warning;
	-- END Test Number 9

	-- BEGIN Test Number 10
	testNo <= 10; -- Note for test number 1
	RWr <= '0';
	rd <= x"00110";
	rs1 <= x"00110";
	rs2 <= x"00110";
	WBDat <= x"ffffffff";
	ce <= '1';
	wait for (1 * period);
	assert rs1D = x"a5a5a5a5" report "TestNo 10 rs1D mismatch" severity warning;
	assert rs2D = x"a5a5a5a5" report "TestNo 10 rs2D mismatch" severity warning;
	-- END Test Number 10

	-- BEGIN Test Number 11
	testNo <= 11; -- Note for test number 2
	RWr <= '1';
	rd <= x"00001";
	rs1 <= x"00001";
	rs2 <= x"00001";
	WBDat <= x"ffffffff";
	ce <= '1';
	wait for (1 * period);
	assert rs1D = x"ffffffff" report "TestNo 11 rs1D mismatch" severity warning;
	assert rs2D = x"ffffffff" report "TestNo 11 rs2D mismatch" severity warning;
	-- END Test Number 11


	-- END Testbench stimulus

	report "%N Simulation end, time = "& time'image(now);
	-- Assert 'endOfSim' flag to stop the clock signal
	endOfSim <= TRUE;
	wait; -- Wait forever
end process; 
end behave;