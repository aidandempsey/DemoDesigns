#

The test plan table format includes
row 1: input signal names
row 2: output signal names
row 3: signal radix
row 4: TestNo, delay and Note column headings
column 2: TestNo test number
column 3: delay value, of type integer or real

Create a single VERILOG initial statement, in a formatted code box, without any loops

For each TestNo row from value 1, output the following
TestNo value
Comment, included in the table Note column.
Assignment of every input signal, irrespective of its value. Do not assign any output signals. Use the Verilog signal radix format defined in table row 3
A test of each output signal value and message, comparing it with the value included in its corresponding output signal column in the table. Output a failing message if the values do not match. Do not test input signal values.

Do not include a loop in the output.
Do not include 'case TestNo' in the output.
Do not include any other delay statements
Do not ask me to Add more test. Please generate them all.

integer testNo;
parameter period = 20; // 20 ns
reg  RWr;
reg [4:0] rd;
reg [4:0] rs1;
reg [4:0] rs2;
wire [31:0] rs1D;
wire [31:0] rs2D;
reg [31:0] WBDat;
reg  ce;

Inputs                ce    RWr  rd     WBDat    rs1   rs2
Outputs                                                      rs1D      rs2D
                      1'b   1'b  5'b    32'h     5'b   5'b   32'h      32'h 
         TestNo delay                                                            Note
         1      1     1     1    00100  deadbeef 00100 00100 deadbeef  deadbeef  Write 
RB(4).  Read RB(4) on rs1D 
and rs2D
         2      1     1     1    00101  c001cafe 00100 00101 deadbeef  c001cafe  Write 
RB(5).  Read RB(4) on rs1D 
and RB(5) on rs2D)
         3      1     1     1    00110  f00dcafe 00110 00100 f00dcafe  deadbeef  Write 
RB(6).  Read RB(6) on rs1D 
and RB(4) on rs2D
         4      2     1     1    00001  a5a5a5a5 00001 00001 a5a5a5a5  a5a5a5a5  Write 
RB(1).  Read RB(1) on rs1D 
and rs2D
         5      3     1     1    11111  3c3c3c3c 11111 00001 3c3c3c3c  a5a5a5a5  Write 
RB(31). Read RB(31) on rs1D 
and RB(1) on rs2D
         6      3     1     1    00000  5a5a5a5a 11111 00000 3c3c3c3c  00000000  Write 
RB(0).  Read RB(31) on rs1D 
and RB(0)=0 on rs2D (write 0x5a5a5a5a to x0 does not occur)
         7      1     0     1    00100  c001100c 00100 11111 deadbeef  3c3c3c3c  Write/
read RB(4), with ce 
deasserted. Read RB(4) on rs1D and RB(31) on rs2D
         8      1     1     1    00100  c001100c 00100 00100 c001100c  c001100c  Write 
RB(4). Read RB(4) on rs1D 
and rs2D
         9      1     1     0    00001  ffffffff 00001 00001 a5a5a5a5  a5a5a5a5  Write 
RB(1), with RWr deasserted. 
Read RB(4)on rs1D and rs2D
         10     1     1     1    00001  ffffffff 00001 00001 ffffffff  ffffffff  Write RB(1), with 
RWr deasserted. Read 
RB(4)on rs1D and rs2D