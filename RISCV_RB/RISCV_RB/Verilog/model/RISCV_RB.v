// Generated by HDLGen, Github https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT, on 24-September-2024 at 13:27

// Component Name : RISCV_RB
// Title          : 32 x 32-bit Register Bank with Chip Enable. Single Synchronous Write Port, Dual Combinational Read Ports

// Author(s)      : Fearghal Morgan
// Organisation   : University of Galway
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 24/09/2024

// Description
// If RWr = 1  
//       If rd  > 0  
//         x(rd) = WBDat      Synchronous Write
// 
// Dual Combinational Read Ports
// rs1D = x(rs1)
// rs2D = x(rs2)
// 
// Using CSArray in the HDLGen-ChatGPT project, i.e., CSArray(31:0)(31:0)
// 
// Rather than x(31:0)(31:0)

// Entity Signal Dictionary
// RWr   Synchronous Register Write Enable, High Asserted
// rd    Destination Register Address, Address 0 - 31
// rs1   Source Register 1 Address
// rs2   Source Register 2 Address
// rs1D  Source Register 1 Data, Read Combinationally
// rs2D  Source Register 2 Data
// WBDat Writeback Data. Selected Datapath for RB Writes.
// ce    Chip Enable, Asserted High
// clk   System Clock Strobe, Rising Edge Active
// rst   Asynchronous Reset Signal, Asserted High to Clear All Registers Immediately.

// Internal Signal Dictionary
// NSArray Register Array Next State Signal
// CSArray Register Array Current State Signal

module RISCV_RB(
		RWr,
		rd,
		rs1,
		rs2,
		rs1D,
		rs2D,
		WBDat,
		ce,
		clk,
		rst
	);

	// Port Definitions
	input  RWr;
	input [4:0] rd;
	input [4:0] rs1;
	input [4:0] rs2;
	output [31:0] rs1D;
	output [31:0] rs2D;
	input [31:0] WBDat;
	input  ce;
	input  clk;
	input  rst;

    wire [31:0] rs1D;
    wire [31:0] rs2D;

    // Internal Signal Declarations
    reg [31:0] NSArray [31:0] ;
    reg [31:0] CSArray [31:0] ;
    integer i;

    always @(RWr or rd or WBDat or CSArray[0] or CSArray[1] or CSArray[2] or CSArray[3] or CSArray[4] or CSArray[5] or CSArray[6] or CSArray[7] or CSArray[8] or CSArray[9] or CSArray[10] or CSArray[11] or CSArray[12] or CSArray[13] or CSArray[14] or CSArray[15] or CSArray[16] or CSArray[17] or CSArray[18] or CSArray[19] or CSArray[20] or CSArray[21] or CSArray[22] or CSArray[23] or CSArray[24] or CSArray[25] or CSArray[26] or CSArray[27] or CSArray[28] or CSArray[29] or CSArray[30] or CSArray[31])
    begin : NSDecode_p
    	// Default assignment
    	for (i=0; i<32; i=i+1) begin
    		NSArray[i] <= CSArray[i];
    	end
    	if (RWr == 1'b1) begin
    		if (rd > 1'b0) begin
    			NSArray[rd] <= WBDat;
    		end
    	end
    end

    assign rs1D = CSArray[rs1];
    assign rs2D = CSArray[rs2];

    always @(posedge clk or posedge rst)
    begin : stateReg_p	
    	if (rst == 1'b1) begin
    		// Default assignment
    		for (i=0; i<32; i=i+1) begin
    			CSArray[i] <= 32'b0;
    		end
    	end else begin
    		// Default assignment
    		for (i=0; i<32; i=i+1) begin
    			CSArray[i] <= CSArray[i];
    		end
    	end
    end

endmodule
