// Title Section Start
// Verilog testbench RISCV_RB_TB
// Generated by HDLGen, Github https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT, on 24-September-2024 at 13:25

// Component Name : RISCV_RB
// Title          : 32 x 32-bit Register Bank, with chip enable. Single synchronous write port, dual combinational read ports

// Author(s)      : Fearghal Morgan
// Organisation   : University of Galway
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 24/09/2024

// Description    : refer to component hdl model for function description and signal dictionary
// Title Section End
module RISCV_RB_TB();

// testbench signal declarations
integer testNo; // aids locating test in simulation waveform
reg endOfSim; // assert at end of simulation to highlight simuation done. Stops clk signal generation.

// Typically use the same signal names as in the Verilog module
reg clk;
reg rst;

reg  RWr;
reg [4:0] rd;
reg [4:0] rs1;
reg [4:0] rs2;
wire [31:0] rs1D;
wire [31:0] rs2D;
reg [31:0] WBDat;
reg  ce;

parameter  period = 20; // 20 ns
initial clk = 1'b1;
initial endOfSim = 1'b0;
 
// Generate clk signal, if sequential component, and endOfSim is 0.
always # (period/2.0) if (~endOfSim) clk = ~ clk;

RISCV_RB UUT
	(
	.RWr (RWr), 
	.rd (rd), 
	.rs1 (rs1), 
	.rs2 (rs2), 
	.rs1D (rs1D), 
	.rs2D (rs2D), 
	.WBDat (WBDat), 
	.ce (ce), 
	.clk (clk), 
	.rst (rst)
	);

initial
begin
$timeformat(-9, 2, " ns", 20);
$display("Simulation start :: time is %0t",$time);

// Default input signal values
testNo = 0;
RWr = 1'b0;
rd = 5'b0;
rs1 = 5'b0;
rs2 = 5'b0;
WBDat = 32'b0;
ce = 1'b0;

rst    = 1'b1;
# (1.2 * period);
rst   = 1'b0;
# (1 * period);
// START Testbench stimulus

// BEGIN Test Number 1
testNo = 1; // Note for test number 1
RWr = 1'b1;
rd = 5'h00100;
rs1 = 5'h00100;
rs2 = 5'h00100;
WBDat = 32'hdeadbeef;
ce = 1'b1;
#(1 * period);
if (rs1D !== 32'hdeadbeef)
	 $display("TestNo 1 rs1D mismatch");
if (rs2D !== 32'hdeadbeef)
	 $display("TestNo 1 rs2D mismatch");
// END Test Number 1

// BEGIN Test Number 2
testNo = 2; // Note for test number 2
RWr = 1'b1;
rd = 5'h00101;
rs1 = 5'h00100;
rs2 = 5'h00101;
WBDat = 32'hc001cafe;
ce = 1'b1;
#(1 * period);
if (rs1D !== 32'hdeadbeef)
	 $display("TestNo 2 rs1D mismatch");
if (rs2D !== 32'hc001cafe)
	 $display("TestNo 2 rs2D mismatch");
// END Test Number 2

// BEGIN Test Number 3
testNo = 3; // Note for test number 3
RWr = 1'b1;
rd = 5'h00110;
rs1 = 5'h00110;
rs2 = 5'h00100;
WBDat = 32'hf00dcafe;
ce = 1'b1;
#(1 * period);
if (rs1D !== 32'hf00dcafe)
	 $display("TestNo 3 rs1D mismatch");
if (rs2D !== 32'hdeadbeef)
	 $display("TestNo 3 rs2D mismatch");
// END Test Number 3

// BEGIN Test Number 4
testNo = 4; // Note for test number 1
RWr = 1'b1;
rd = 5'h00110;
rs1 = 5'h00110;
rs2 = 5'h00110;
WBDat = 32'ha5a5a5a5;
ce = 1'b1;
#(0.1 * period);
if (rs1D !== 32'hf00dcafe)
	 $display("TestNo 4 rs1D mismatch");
if (rs2D !== 32'hf00dcafe)
	 $display("TestNo 4 rs2D mismatch");
// END Test Number 4

// BEGIN Test Number 5
testNo = 5; // Note for test number 2
RWr = 1'b1;
rd = 5'h00110;
rs1 = 5'h00110;
rs2 = 5'h00101;
WBDat = 32'ha5a5a5a5;
ce = 1'b1;
#(0.9 * period);
if (rs1D !== 32'ha5a5a5a5)
	 $display("TestNo 5 rs1D mismatch");
if (rs2D !== 32'hc001cafe)
	 $display("TestNo 5 rs2D mismatch");
// END Test Number 5

// BEGIN Test Number 6
testNo = 6; // Note for test number 3
RWr = 1'b1;
rd = 5'h11111;
rs1 = 5'h11111;
rs2 = 5'h00110;
WBDat = 32'h3c3c3c3c;
ce = 1'b1;
#(3 * period);
if (rs1D !== 32'h3c3c3c3c)
	 $display("TestNo 6 rs1D mismatch");
if (rs2D !== 32'ha5a5a5a5)
	 $display("TestNo 6 rs2D mismatch");
// END Test Number 6

// BEGIN Test Number 7
testNo = 7; // Note for test number 1
RWr = 1'b1;
rd = 5'h00000;
rs1 = 5'h11111;
rs2 = 5'h00000;
WBDat = 32'h5a5a5a5a;
ce = 1'b1;
#(3 * period);
if (rs1D !== 32'h3c3c3c3c)
	 $display("TestNo 7 rs1D mismatch");
if (rs2D !== 32'h00000000)
	 $display("TestNo 7 rs2D mismatch");
// END Test Number 7

// BEGIN Test Number 8
testNo = 8; // Note for test number 2
RWr = 1'b1;
rd = 5'h00100;
rs1 = 5'h00100;
rs2 = 5'h11111;
WBDat = 32'hc001100c;
ce = 1'b0;
#(1 * period);
if (rs1D !== 32'hdeadbeef)
	 $display("TestNo 8 rs1D mismatch");
if (rs2D !== 32'h3c3c3c3c)
	 $display("TestNo 8 rs2D mismatch");
// END Test Number 8

// BEGIN Test Number 9
testNo = 9; // Note for test number 3
RWr = 1'b1;
rd = 5'h00100;
rs1 = 5'h00100;
rs2 = 5'h00100;
WBDat = 32'hc001100c;
ce = 1'b1;
#(1 * period);
if (rs1D !== 32'hc001100c)
	 $display("TestNo 9 rs1D mismatch");
if (rs2D !== 32'hc001100c)
	 $display("TestNo 9 rs2D mismatch");
// END Test Number 9

// BEGIN Test Number 10
testNo = 10; // Note for test number 1
RWr = 1'b0;
rd = 5'h00110;
rs1 = 5'h00110;
rs2 = 5'h00110;
WBDat = 32'hffffffff;
ce = 1'b1;
#(1 * period);
if (rs1D !== 32'ha5a5a5a5)
	 $display("TestNo 10 rs1D mismatch");
if (rs2D !== 32'ha5a5a5a5)
	 $display("TestNo 10 rs2D mismatch");
// END Test Number 10

// BEGIN Test Number 11
testNo = 11; // Note for test number 2
RWr = 1'b1;
rd = 5'h00001;
rs1 = 5'h00001;
rs2 = 5'h00001;
WBDat = 32'hffffffff;
ce = 1'b1;
#(1 * period);
if (rs1D !== 32'hffffffff)
	 $display("TestNo 11 rs1D mismatch");
if (rs2D !== 32'hffffffff)
	 $display("TestNo 11 rs2D mismatch");
// END Test Number 11

// END Testbench stimulus

// Print simulation runtime in ns
$display("Simulation end time is %0t ns",$time);
endOfSim = 1'b1; // Stop CLK signal

end
endmodule