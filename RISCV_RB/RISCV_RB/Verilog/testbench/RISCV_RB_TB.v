// Title Section
// VHDL testbench RISCV_RB_TB
// Generated by HDLGen, Github https://github.com/fearghal1/HDLGen

// Component Name : RISCV_RB
// Title          : 32 x 32-bit Register Bank, with chip enable. Single synchronous write port, dual combinational read ports
// Description    : refer to component hdl model fro function description and signal dictionary
// Author(s)      : Fearghal Morgan
// Company        : University of Galway
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 14/07/2023

module RISCV_RB_TB();

// testbench signal declarations
integer testNo; // aids locating test in simulation waveform
reg endOfSim; // assert at end of simulation to highlight simuation done. Stops clk signal generation.

// Typically use the same signal names as in the Verilog module
reg clk;
reg rst;

reg  RWr;
reg [4:0] rd;
reg [4:0] rs1;
reg [4:0] rs2;
wire [31:0] rs1D;
wire [31:0] rs2D;
reg [31:0] WBDat;
reg  ce;

parameter  period = 20; // 20 ns
initial clk = 1'b1;
initial endOfSim = 1'b0;
 
// Generate clk signal, if sequential component, and endOfSim is 0.
always # (period/2.0) if (~endOfSim) clk = ~ clk;

RISCV_RB UUT
	(
	.clk (clk), 
	.rst (rst), 
	.RWr (RWr), 
	.rd (rd), 
	.rs1 (rs1), 
	.rs2 (rs2), 
	.rs1D (rs1D), 
	.rs2D (rs2D), 
	.WBDat (WBDat), 
	.ce (ce)
	);

initial
begin
$timeformat(-9, 2, " ns", 20);
$display("Simulation start :: time is %0t",$time);
	// Apply default INPUT signal values. Do not assign output signals (generated by the UUT) here
	// Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	testNo = 0;
	RWr = 1'b0;
	rd = 5'b0;
	rs1 = 5'b0;
	rs2 = 5'b0;
	WBDat = 32'b0;
	ce = 1'b0;
	rst    = 1'b1;
	# (1.2 * period);
	rst   = 1'b0;
	# (1 * period);

	// Add testbench stimulus here START

	// === If copying stim_p testbench code, generated by ChatGPT, 
	// === delete the following lines from the beginning of the pasted code (if they exist)
	// === integer testNo;
	// === parameter period = 20; // 20 ns
	// === reg, wire, declarations  ....
	// === initial begin
	// === Delete the -- === notes

  testNo = 1;
  // Write RB(4). Read RB(4) on rs1D and rs2D
  ce = 1;
  RWr = 1;
  rd = 5'b00100;
  WBDat = 32'hdeadbeef;
  rs1 = 5'b00100;
  rs2 = 5'b00100;
  #(1 * period);
  if (rs1D !== 32'hdeadbeef || rs2D !== 32'hdeadbeef)
    $display("Test %d failed", testNo);

  testNo = 2;
  // Write RB(5). Read RB(4) on rs1D and RB(5) on rs2D)
  ce = 1;
  RWr = 1;
  rd = 5'b00101;
  WBDat = 32'hc001cafe;
  rs1 = 5'b00100;
  rs2 = 5'b00101;
  #(1 * period);
  if (rs1D !== 32'hdeadbeef || rs2D !== 32'hc001cafe)
    $display("Test %d failed", testNo);

  testNo = 3;
  // Write RB(6). Read RB(6) on rs1D and RB(4) on rs2D
  ce = 1;
  RWr = 1;
  rd = 5'b00110;
  WBDat = 32'hf00dcafe;
  rs1 = 5'b00110;
  rs2 = 5'b00100;
  #(1 * period);
  if (rs1D !== 32'hf00dcafe || rs2D !== 32'hdeadbeef)
    $display("Test %d failed", testNo);

  testNo = 4;
  // Write RB(1). Read RB(1) on rs1D and rs2D
  ce = 1;
  RWr = 1;
  rd = 5'b00001;
  WBDat = 32'ha5a5a5a5;
  rs1 = 5'b00001;
  rs2 = 5'b00001;
  #(2 * period);
  if (rs1D !== 32'ha5a5a5a5 || rs2D !== 32'ha5a5a5a5)
    $display("Test %d failed", testNo);

  testNo = 5;
  // Write RB(31). Read RB(31) on rs1D and RB(1) on rs2D
  ce = 1;
  RWr = 1;
  rd = 5'b11111;
  WBDat = 32'h3c3c3c3c;
  rs1 = 5'b11111;
  rs2 = 5'b00001;
  #(3 * period);
  if (rs1D !== 32'h3c3c3c3c || rs2D !== 32'ha5a5a5a5)
    $display("Test %d failed", testNo);

  testNo = 6;
  // Write RB(0). Read RB(31) on rs1D and RB(0)=0 on rs2D (write 0x5a5a5a5a to x0 does not occur)
  ce = 1;
  RWr = 1;
  rd = 5'b00000;
  WBDat = 32'h5a5a5a5a;
  rs1 = 5'b11111;
  rs2 = 5'b00000;
  #(3 * period);
  if (rs1D !== 32'h3c3c3c3c || rs2D !== 32'h00000000)
    $display("Test %d failed", testNo);

  testNo = 7;
  // Write/read RB(4), with ce deasserted. Read RB(4) on rs1D and RB(31) on rs2D
  ce = 0;
  RWr = 1;
  rd = 5'b00100;
  WBDat = 32'hc001100c;
  rs1 = 5'b00100;
  rs2 = 5'b11111;
  #(1 * period);
  if (rs1D !== 32'hdeadbeef || rs2D !== 32'h3c3c3c3c)
    $display("Test %d failed", testNo);

  testNo = 8;
  // Write RB(4). Read RB(4) on rs1D and rs2D
  ce = 1;
  RWr = 1;
  rd = 5'b00100;
  WBDat = 32'hc001100c;
  rs1 = 5'b00100;
  rs2 = 5'b00100;
  #(1 * period);
  if (rs1D !== 32'hc001100c || rs2D !== 32'hc001100c)
    $display("Test %d failed", testNo);

  testNo = 9;
  // Write RB(1), with RWr deasserted. Read RB(4) on rs1D and rs2D
  ce = 1;
  RWr = 0;
  rd = 5'b00001;
  WBDat = 32'hffffffff;
  rs1 = 5'b00001;
  rs2 = 5'b00001;
  #(1 * period);
  if (rs1D !== 32'ha5a5a5a5 || rs2D !== 32'ha5a5a5a5)
    $display("Test %d failed", testNo);

  testNo = 10;
  // Write RB(1), with RWr deasserted
  ce = 1;
  RWr = 1;
  rd = 5'b00001;
  WBDat = 32'hffffffff;
  rs1 = 5'b00001;
  rs2 = 5'b00001;
  #(1 * period);
  if (rs1D !== 32'hffffffff || rs2D !== 32'hffffffff)
    $display("Test %d failed", testNo);

	// === If copying a stim_p process generated by ChatGPT, 
	// === delete the following lines from the end of the pasted code 
	// === begin end
	// === Delete the -- === notes

	// Add testbench stimulus here END

	// Print nanosecond (ns) time to simulation transcript
	// Use to find time when simulation ends (endOfSim is TRUE)
	// Re-run the simulation for this time
	// Select timing diagram and use View>Zoom Fit
	$display("Simulation end :: time is %0t",$time);
	endOfSim = 1'b1; // assert to stop clk signal generation

end
endmodule