-- Title Section Start
-- VHDL Testbench - singleShot_TB
-- Generated by HDLGen-ChatGPT on 29-March-2024 at 10:45
-- Github: https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT

-- Component Name:	singleShot
-- Title:	Pulse generator, one clock period duration

-- Author(s):	Fearghal Morgan
-- Organisation:	University of Galway
-- Email:	fearghal.morgan@universityofgalway.ie
-- Date:	29/03/2024

-- Description:	 Refer to component's HDL Model for description and signal dictionary
-- Title Section End

-- Library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Testbench entity declaration
entity singleShot_TB is end entity singleShot_TB;

architecture behave of singleShot_TB is

-- unit under test (UUT) component declaration. Identical to component entity, with 'entity' replaced with 'component'
component singleShot is 
Port(
	sw : in std_logic;
	aShot : out std_logic 
	);
end component;

-- testbench signal declarations
signal testNo: integer; -- aids locating test in simulation waveform
signal endOfSim : boolean := false; -- assert at end of simulation to highlight simuation done. Stops clk signal generation.

-- Typically use the same signal names as in the VHDL entity, with keyword signal added, and without in/out mode keyword

signal sw : std_logic;
signal aShot : std_logic;

constant period: time := 20 ns; -- Default simulation time. Use as simulation delay constant, or clk period if sequential model ((50MHz clk here)
 
begin

-- Instantiate the Unit Under Test (UUT)
-- Map the component's internal signals to testbench signals
UUT: singleShot
port map
	(
	sw => sw, 
	aShot => aShot
	);

-- Signal stimulus process
-- Process automatically executes at start of simulation due to empty sensitivity list.
-- Process halts at the 'wait;' statement
stim_p: process
begin
	report "%N Simulation start, time = "& time'image(now);

	-- Apply default INPUT signal values.
	-- Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	-- if signal type is 'std_logic', use '0'
	-- if signal type is 'std_logic_vector' use (others => '0')
	-- if signal type is 'integer' use 0
	sw <= '0';

	-- START Testbench stimulus


	-- END Testbench stimulus

	report "%N Simulation end, time = "& time'image(now);
	-- Assert 'endOfSim' flag to stop the clock signal
	endOfSim <= TRUE;
	wait; -- Wait forever
end process; 
end behave;