// Title Section Start
// Verilog testbench singleShot_TB
// Generated by HDLGen, Github https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT, on 24-September-2024 at 13:34

// Component Name : singleShot
// Title          : Pulse generator, one clock period duration

// Author(s)      : Fearghal Morgan
// Organisation   : University of Galway
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 24/09/2024

// Description    : refer to component hdl model for function description and signal dictionary
// Title Section End
module singleShot_TB();

// testbench signal declarations
integer testNo; // aids locating test in simulation waveform
reg endOfSim; // assert at end of simulation to highlight simuation done. Stops clk signal generation.

// Typically use the same signal names as in the Verilog module
reg clk;
reg rst;

reg  sw;
wire  aShot;

parameter  period = 20; // 20 ns
initial clk = 1'b1;
initial endOfSim = 1'b0;
 
// Generate clk signal, if sequential component, and endOfSim is 0.
always # (period/2.0) if (~endOfSim) clk = ~ clk;

singleShot UUT
	(
	.sw (sw), 
	.aShot (aShot), 
	.clk (clk), 
	.rst (rst)
	);

initial
begin
$timeformat(-9, 2, " ns", 20);
$display("Simulation start :: time is %0t",$time);

// Default input signal values
testNo = 0;
sw = 1'b0;

rst    = 1'b1;
# (1.2 * period);
rst   = 1'b0;
# (1 * period);
// START Testbench stimulus

// BEGIN Test Number 1
testNo = 1; // Note for test number 1
sw = 1'b0;
#(1 * period);
if (aShot !== 1'b0)
	 $display("TestNo 1 aShot mismatch");
// END Test Number 1

// BEGIN Test Number 2
testNo = 2; // Note for test number 2
sw = 1'b0;
#(1 * period);
if (aShot !== 1'b0)
	 $display("TestNo 2 aShot mismatch");
// END Test Number 2

// BEGIN Test Number 3
testNo = 3; // Note for test number 3
sw = 1'b0;
#(1 * period);
if (aShot !== 1'b0)
	 $display("TestNo 3 aShot mismatch");
// END Test Number 3

// END Testbench stimulus

// Print simulation runtime in ns
$display("Simulation end time is %0t ns",$time);
endOfSim = 1'b1; // Stop CLK signal

end
endmodule